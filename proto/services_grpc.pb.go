//
// Copyright (c) 2020, 2023, Oracle and/or its affiliates.
//
// Licensed under the Universal Permissive License v 1.0 as shown at
// https://oss.oracle.com/licenses/upl.

// Authors:
//  Mahesh Kannan
//  Jonathan Knight

// NamedCacheService service definition.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.2
// source: services.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NamedCacheService_AddIndex_FullMethodName         = "/coherence.NamedCacheService/addIndex"
	NamedCacheService_Aggregate_FullMethodName        = "/coherence.NamedCacheService/aggregate"
	NamedCacheService_Clear_FullMethodName            = "/coherence.NamedCacheService/clear"
	NamedCacheService_ContainsEntry_FullMethodName    = "/coherence.NamedCacheService/containsEntry"
	NamedCacheService_ContainsKey_FullMethodName      = "/coherence.NamedCacheService/containsKey"
	NamedCacheService_ContainsValue_FullMethodName    = "/coherence.NamedCacheService/containsValue"
	NamedCacheService_Destroy_FullMethodName          = "/coherence.NamedCacheService/destroy"
	NamedCacheService_EntrySet_FullMethodName         = "/coherence.NamedCacheService/entrySet"
	NamedCacheService_Events_FullMethodName           = "/coherence.NamedCacheService/events"
	NamedCacheService_Get_FullMethodName              = "/coherence.NamedCacheService/get"
	NamedCacheService_GetAll_FullMethodName           = "/coherence.NamedCacheService/getAll"
	NamedCacheService_Invoke_FullMethodName           = "/coherence.NamedCacheService/invoke"
	NamedCacheService_InvokeAll_FullMethodName        = "/coherence.NamedCacheService/invokeAll"
	NamedCacheService_IsEmpty_FullMethodName          = "/coherence.NamedCacheService/isEmpty"
	NamedCacheService_IsReady_FullMethodName          = "/coherence.NamedCacheService/isReady"
	NamedCacheService_KeySet_FullMethodName           = "/coherence.NamedCacheService/keySet"
	NamedCacheService_NextEntrySetPage_FullMethodName = "/coherence.NamedCacheService/nextEntrySetPage"
	NamedCacheService_NextKeySetPage_FullMethodName   = "/coherence.NamedCacheService/nextKeySetPage"
	NamedCacheService_Put_FullMethodName              = "/coherence.NamedCacheService/put"
	NamedCacheService_PutAll_FullMethodName           = "/coherence.NamedCacheService/putAll"
	NamedCacheService_PutIfAbsent_FullMethodName      = "/coherence.NamedCacheService/putIfAbsent"
	NamedCacheService_Remove_FullMethodName           = "/coherence.NamedCacheService/remove"
	NamedCacheService_RemoveIndex_FullMethodName      = "/coherence.NamedCacheService/removeIndex"
	NamedCacheService_RemoveMapping_FullMethodName    = "/coherence.NamedCacheService/removeMapping"
	NamedCacheService_Replace_FullMethodName          = "/coherence.NamedCacheService/replace"
	NamedCacheService_ReplaceMapping_FullMethodName   = "/coherence.NamedCacheService/replaceMapping"
	NamedCacheService_Size_FullMethodName             = "/coherence.NamedCacheService/size"
	NamedCacheService_Truncate_FullMethodName         = "/coherence.NamedCacheService/truncate"
	NamedCacheService_Values_FullMethodName           = "/coherence.NamedCacheService/values"
)

// NamedCacheServiceClient is the client API for NamedCacheService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// A gRPC NamedCache service.
type NamedCacheServiceClient interface {
	// Add an index to a cache.
	AddIndex(ctx context.Context, in *AddIndexRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Obtain the results of running an entry aggregator against the cache.
	// The aggregator may run against entries specified by key or entries
	// matching a given filter.
	Aggregate(ctx context.Context, in *AggregateRequest, opts ...grpc.CallOption) (*wrapperspb.BytesValue, error)
	// Clear a cache.
	Clear(ctx context.Context, in *ClearRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Check if this map contains a mapping for the specified key to the specified value.
	ContainsEntry(ctx context.Context, in *ContainsEntryRequest, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	// Check if this map contains a mapping for the specified key.
	ContainsKey(ctx context.Context, in *ContainsKeyRequest, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	// Check if this map contains a mapping for the specified value.
	ContainsValue(ctx context.Context, in *ContainsValueRequest, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	// Destroy a cache.
	Destroy(ctx context.Context, in *DestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Obtain all of the entries in the cache where the cache entries
	// match a given filter.
	EntrySet(ctx context.Context, in *EntrySetRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Entry], error)
	// Sets up a bidirectional channel for cache events.
	Events(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[MapListenerRequest, MapListenerResponse], error)
	// Get a value for a given key from a cache.
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*OptionalValue, error)
	// Get all of the values from a cache for a given collection of keys.
	GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Entry], error)
	// Invoke an entry processor against an entry in a cache.
	Invoke(ctx context.Context, in *InvokeRequest, opts ...grpc.CallOption) (*wrapperspb.BytesValue, error)
	// Invoke an entry processor against a number of entries in a cache.
	InvokeAll(ctx context.Context, in *InvokeAllRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Entry], error)
	// Determine whether a cache is empty.
	IsEmpty(ctx context.Context, in *IsEmptyRequest, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	// Determine whether a cache is empty.
	IsReady(ctx context.Context, in *IsReadyRequest, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	// Obtain all of the keys in the cache where the cache entries
	// match a given filter.
	KeySet(ctx context.Context, in *KeySetRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[wrapperspb.BytesValue], error)
	// Get the next page of a paged entry set request.
	NextEntrySetPage(ctx context.Context, in *PageRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[EntryResult], error)
	// Get the next page of a paged key set request.
	NextKeySetPage(ctx context.Context, in *PageRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[wrapperspb.BytesValue], error)
	// Associate the specified value with the specified key in this cache.
	// If the cache previously contained a mapping for the key, the old value
	// is replaced by the specified value.
	// An optional expiry (TTL) value may be set for the entry to expire the
	// entry from the cache after that time.
	Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*wrapperspb.BytesValue, error)
	// Copies all of the mappings from the request into the cache.
	PutAll(ctx context.Context, in *PutAllRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// If the specified key is not already associated with a value (or is mapped
	// to null associate it with the given value and returns null, else return
	// the current value.
	PutIfAbsent(ctx context.Context, in *PutIfAbsentRequest, opts ...grpc.CallOption) (*wrapperspb.BytesValue, error)
	// Remove the mapping that is associated with the specified key.
	Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*wrapperspb.BytesValue, error)
	// Remove an index from the cache.
	RemoveIndex(ctx context.Context, in *RemoveIndexRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Remove the mapping that is associated with the specified key only
	// if the mapping exists in the cache.
	RemoveMapping(ctx context.Context, in *RemoveMappingRequest, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	// Replace the entry for the specified key only if it is currently
	// mapped to some value.
	Replace(ctx context.Context, in *ReplaceRequest, opts ...grpc.CallOption) (*wrapperspb.BytesValue, error)
	// Replace the mapping for the specified key only if currently mapped
	// to the specified value.
	ReplaceMapping(ctx context.Context, in *ReplaceMappingRequest, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	// Determine the number of entries in a cache.
	Size(ctx context.Context, in *SizeRequest, opts ...grpc.CallOption) (*wrapperspb.Int32Value, error)
	// Truncate a cache. This is the same as clearing a cache but no
	// cache entry events will be generated.
	Truncate(ctx context.Context, in *TruncateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Obtain all of the values in the cache where the cache entries
	// match a given filter.
	Values(ctx context.Context, in *ValuesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[wrapperspb.BytesValue], error)
}

type namedCacheServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNamedCacheServiceClient(cc grpc.ClientConnInterface) NamedCacheServiceClient {
	return &namedCacheServiceClient{cc}
}

func (c *namedCacheServiceClient) AddIndex(ctx context.Context, in *AddIndexRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, NamedCacheService_AddIndex_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namedCacheServiceClient) Aggregate(ctx context.Context, in *AggregateRequest, opts ...grpc.CallOption) (*wrapperspb.BytesValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.BytesValue)
	err := c.cc.Invoke(ctx, NamedCacheService_Aggregate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namedCacheServiceClient) Clear(ctx context.Context, in *ClearRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, NamedCacheService_Clear_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namedCacheServiceClient) ContainsEntry(ctx context.Context, in *ContainsEntryRequest, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, NamedCacheService_ContainsEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namedCacheServiceClient) ContainsKey(ctx context.Context, in *ContainsKeyRequest, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, NamedCacheService_ContainsKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namedCacheServiceClient) ContainsValue(ctx context.Context, in *ContainsValueRequest, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, NamedCacheService_ContainsValue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namedCacheServiceClient) Destroy(ctx context.Context, in *DestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, NamedCacheService_Destroy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namedCacheServiceClient) EntrySet(ctx context.Context, in *EntrySetRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Entry], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &NamedCacheService_ServiceDesc.Streams[0], NamedCacheService_EntrySet_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[EntrySetRequest, Entry]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NamedCacheService_EntrySetClient = grpc.ServerStreamingClient[Entry]

func (c *namedCacheServiceClient) Events(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[MapListenerRequest, MapListenerResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &NamedCacheService_ServiceDesc.Streams[1], NamedCacheService_Events_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[MapListenerRequest, MapListenerResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NamedCacheService_EventsClient = grpc.BidiStreamingClient[MapListenerRequest, MapListenerResponse]

func (c *namedCacheServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*OptionalValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OptionalValue)
	err := c.cc.Invoke(ctx, NamedCacheService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namedCacheServiceClient) GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Entry], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &NamedCacheService_ServiceDesc.Streams[2], NamedCacheService_GetAll_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetAllRequest, Entry]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NamedCacheService_GetAllClient = grpc.ServerStreamingClient[Entry]

func (c *namedCacheServiceClient) Invoke(ctx context.Context, in *InvokeRequest, opts ...grpc.CallOption) (*wrapperspb.BytesValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.BytesValue)
	err := c.cc.Invoke(ctx, NamedCacheService_Invoke_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namedCacheServiceClient) InvokeAll(ctx context.Context, in *InvokeAllRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Entry], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &NamedCacheService_ServiceDesc.Streams[3], NamedCacheService_InvokeAll_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[InvokeAllRequest, Entry]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NamedCacheService_InvokeAllClient = grpc.ServerStreamingClient[Entry]

func (c *namedCacheServiceClient) IsEmpty(ctx context.Context, in *IsEmptyRequest, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, NamedCacheService_IsEmpty_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namedCacheServiceClient) IsReady(ctx context.Context, in *IsReadyRequest, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, NamedCacheService_IsReady_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namedCacheServiceClient) KeySet(ctx context.Context, in *KeySetRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[wrapperspb.BytesValue], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &NamedCacheService_ServiceDesc.Streams[4], NamedCacheService_KeySet_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[KeySetRequest, wrapperspb.BytesValue]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NamedCacheService_KeySetClient = grpc.ServerStreamingClient[wrapperspb.BytesValue]

func (c *namedCacheServiceClient) NextEntrySetPage(ctx context.Context, in *PageRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[EntryResult], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &NamedCacheService_ServiceDesc.Streams[5], NamedCacheService_NextEntrySetPage_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PageRequest, EntryResult]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NamedCacheService_NextEntrySetPageClient = grpc.ServerStreamingClient[EntryResult]

func (c *namedCacheServiceClient) NextKeySetPage(ctx context.Context, in *PageRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[wrapperspb.BytesValue], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &NamedCacheService_ServiceDesc.Streams[6], NamedCacheService_NextKeySetPage_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PageRequest, wrapperspb.BytesValue]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NamedCacheService_NextKeySetPageClient = grpc.ServerStreamingClient[wrapperspb.BytesValue]

func (c *namedCacheServiceClient) Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*wrapperspb.BytesValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.BytesValue)
	err := c.cc.Invoke(ctx, NamedCacheService_Put_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namedCacheServiceClient) PutAll(ctx context.Context, in *PutAllRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, NamedCacheService_PutAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namedCacheServiceClient) PutIfAbsent(ctx context.Context, in *PutIfAbsentRequest, opts ...grpc.CallOption) (*wrapperspb.BytesValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.BytesValue)
	err := c.cc.Invoke(ctx, NamedCacheService_PutIfAbsent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namedCacheServiceClient) Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*wrapperspb.BytesValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.BytesValue)
	err := c.cc.Invoke(ctx, NamedCacheService_Remove_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namedCacheServiceClient) RemoveIndex(ctx context.Context, in *RemoveIndexRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, NamedCacheService_RemoveIndex_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namedCacheServiceClient) RemoveMapping(ctx context.Context, in *RemoveMappingRequest, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, NamedCacheService_RemoveMapping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namedCacheServiceClient) Replace(ctx context.Context, in *ReplaceRequest, opts ...grpc.CallOption) (*wrapperspb.BytesValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.BytesValue)
	err := c.cc.Invoke(ctx, NamedCacheService_Replace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namedCacheServiceClient) ReplaceMapping(ctx context.Context, in *ReplaceMappingRequest, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, NamedCacheService_ReplaceMapping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namedCacheServiceClient) Size(ctx context.Context, in *SizeRequest, opts ...grpc.CallOption) (*wrapperspb.Int32Value, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.Int32Value)
	err := c.cc.Invoke(ctx, NamedCacheService_Size_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namedCacheServiceClient) Truncate(ctx context.Context, in *TruncateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, NamedCacheService_Truncate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namedCacheServiceClient) Values(ctx context.Context, in *ValuesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[wrapperspb.BytesValue], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &NamedCacheService_ServiceDesc.Streams[7], NamedCacheService_Values_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ValuesRequest, wrapperspb.BytesValue]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NamedCacheService_ValuesClient = grpc.ServerStreamingClient[wrapperspb.BytesValue]

// NamedCacheServiceServer is the server API for NamedCacheService service.
// All implementations must embed UnimplementedNamedCacheServiceServer
// for forward compatibility.
//
// A gRPC NamedCache service.
type NamedCacheServiceServer interface {
	// Add an index to a cache.
	AddIndex(context.Context, *AddIndexRequest) (*emptypb.Empty, error)
	// Obtain the results of running an entry aggregator against the cache.
	// The aggregator may run against entries specified by key or entries
	// matching a given filter.
	Aggregate(context.Context, *AggregateRequest) (*wrapperspb.BytesValue, error)
	// Clear a cache.
	Clear(context.Context, *ClearRequest) (*emptypb.Empty, error)
	// Check if this map contains a mapping for the specified key to the specified value.
	ContainsEntry(context.Context, *ContainsEntryRequest) (*wrapperspb.BoolValue, error)
	// Check if this map contains a mapping for the specified key.
	ContainsKey(context.Context, *ContainsKeyRequest) (*wrapperspb.BoolValue, error)
	// Check if this map contains a mapping for the specified value.
	ContainsValue(context.Context, *ContainsValueRequest) (*wrapperspb.BoolValue, error)
	// Destroy a cache.
	Destroy(context.Context, *DestroyRequest) (*emptypb.Empty, error)
	// Obtain all of the entries in the cache where the cache entries
	// match a given filter.
	EntrySet(*EntrySetRequest, grpc.ServerStreamingServer[Entry]) error
	// Sets up a bidirectional channel for cache events.
	Events(grpc.BidiStreamingServer[MapListenerRequest, MapListenerResponse]) error
	// Get a value for a given key from a cache.
	Get(context.Context, *GetRequest) (*OptionalValue, error)
	// Get all of the values from a cache for a given collection of keys.
	GetAll(*GetAllRequest, grpc.ServerStreamingServer[Entry]) error
	// Invoke an entry processor against an entry in a cache.
	Invoke(context.Context, *InvokeRequest) (*wrapperspb.BytesValue, error)
	// Invoke an entry processor against a number of entries in a cache.
	InvokeAll(*InvokeAllRequest, grpc.ServerStreamingServer[Entry]) error
	// Determine whether a cache is empty.
	IsEmpty(context.Context, *IsEmptyRequest) (*wrapperspb.BoolValue, error)
	// Determine whether a cache is empty.
	IsReady(context.Context, *IsReadyRequest) (*wrapperspb.BoolValue, error)
	// Obtain all of the keys in the cache where the cache entries
	// match a given filter.
	KeySet(*KeySetRequest, grpc.ServerStreamingServer[wrapperspb.BytesValue]) error
	// Get the next page of a paged entry set request.
	NextEntrySetPage(*PageRequest, grpc.ServerStreamingServer[EntryResult]) error
	// Get the next page of a paged key set request.
	NextKeySetPage(*PageRequest, grpc.ServerStreamingServer[wrapperspb.BytesValue]) error
	// Associate the specified value with the specified key in this cache.
	// If the cache previously contained a mapping for the key, the old value
	// is replaced by the specified value.
	// An optional expiry (TTL) value may be set for the entry to expire the
	// entry from the cache after that time.
	Put(context.Context, *PutRequest) (*wrapperspb.BytesValue, error)
	// Copies all of the mappings from the request into the cache.
	PutAll(context.Context, *PutAllRequest) (*emptypb.Empty, error)
	// If the specified key is not already associated with a value (or is mapped
	// to null associate it with the given value and returns null, else return
	// the current value.
	PutIfAbsent(context.Context, *PutIfAbsentRequest) (*wrapperspb.BytesValue, error)
	// Remove the mapping that is associated with the specified key.
	Remove(context.Context, *RemoveRequest) (*wrapperspb.BytesValue, error)
	// Remove an index from the cache.
	RemoveIndex(context.Context, *RemoveIndexRequest) (*emptypb.Empty, error)
	// Remove the mapping that is associated with the specified key only
	// if the mapping exists in the cache.
	RemoveMapping(context.Context, *RemoveMappingRequest) (*wrapperspb.BoolValue, error)
	// Replace the entry for the specified key only if it is currently
	// mapped to some value.
	Replace(context.Context, *ReplaceRequest) (*wrapperspb.BytesValue, error)
	// Replace the mapping for the specified key only if currently mapped
	// to the specified value.
	ReplaceMapping(context.Context, *ReplaceMappingRequest) (*wrapperspb.BoolValue, error)
	// Determine the number of entries in a cache.
	Size(context.Context, *SizeRequest) (*wrapperspb.Int32Value, error)
	// Truncate a cache. This is the same as clearing a cache but no
	// cache entry events will be generated.
	Truncate(context.Context, *TruncateRequest) (*emptypb.Empty, error)
	// Obtain all of the values in the cache where the cache entries
	// match a given filter.
	Values(*ValuesRequest, grpc.ServerStreamingServer[wrapperspb.BytesValue]) error
	mustEmbedUnimplementedNamedCacheServiceServer()
}

// UnimplementedNamedCacheServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNamedCacheServiceServer struct{}

func (UnimplementedNamedCacheServiceServer) AddIndex(context.Context, *AddIndexRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddIndex not implemented")
}
func (UnimplementedNamedCacheServiceServer) Aggregate(context.Context, *AggregateRequest) (*wrapperspb.BytesValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Aggregate not implemented")
}
func (UnimplementedNamedCacheServiceServer) Clear(context.Context, *ClearRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Clear not implemented")
}
func (UnimplementedNamedCacheServiceServer) ContainsEntry(context.Context, *ContainsEntryRequest) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContainsEntry not implemented")
}
func (UnimplementedNamedCacheServiceServer) ContainsKey(context.Context, *ContainsKeyRequest) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContainsKey not implemented")
}
func (UnimplementedNamedCacheServiceServer) ContainsValue(context.Context, *ContainsValueRequest) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContainsValue not implemented")
}
func (UnimplementedNamedCacheServiceServer) Destroy(context.Context, *DestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Destroy not implemented")
}
func (UnimplementedNamedCacheServiceServer) EntrySet(*EntrySetRequest, grpc.ServerStreamingServer[Entry]) error {
	return status.Errorf(codes.Unimplemented, "method EntrySet not implemented")
}
func (UnimplementedNamedCacheServiceServer) Events(grpc.BidiStreamingServer[MapListenerRequest, MapListenerResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Events not implemented")
}
func (UnimplementedNamedCacheServiceServer) Get(context.Context, *GetRequest) (*OptionalValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedNamedCacheServiceServer) GetAll(*GetAllRequest, grpc.ServerStreamingServer[Entry]) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedNamedCacheServiceServer) Invoke(context.Context, *InvokeRequest) (*wrapperspb.BytesValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Invoke not implemented")
}
func (UnimplementedNamedCacheServiceServer) InvokeAll(*InvokeAllRequest, grpc.ServerStreamingServer[Entry]) error {
	return status.Errorf(codes.Unimplemented, "method InvokeAll not implemented")
}
func (UnimplementedNamedCacheServiceServer) IsEmpty(context.Context, *IsEmptyRequest) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsEmpty not implemented")
}
func (UnimplementedNamedCacheServiceServer) IsReady(context.Context, *IsReadyRequest) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsReady not implemented")
}
func (UnimplementedNamedCacheServiceServer) KeySet(*KeySetRequest, grpc.ServerStreamingServer[wrapperspb.BytesValue]) error {
	return status.Errorf(codes.Unimplemented, "method KeySet not implemented")
}
func (UnimplementedNamedCacheServiceServer) NextEntrySetPage(*PageRequest, grpc.ServerStreamingServer[EntryResult]) error {
	return status.Errorf(codes.Unimplemented, "method NextEntrySetPage not implemented")
}
func (UnimplementedNamedCacheServiceServer) NextKeySetPage(*PageRequest, grpc.ServerStreamingServer[wrapperspb.BytesValue]) error {
	return status.Errorf(codes.Unimplemented, "method NextKeySetPage not implemented")
}
func (UnimplementedNamedCacheServiceServer) Put(context.Context, *PutRequest) (*wrapperspb.BytesValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedNamedCacheServiceServer) PutAll(context.Context, *PutAllRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutAll not implemented")
}
func (UnimplementedNamedCacheServiceServer) PutIfAbsent(context.Context, *PutIfAbsentRequest) (*wrapperspb.BytesValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutIfAbsent not implemented")
}
func (UnimplementedNamedCacheServiceServer) Remove(context.Context, *RemoveRequest) (*wrapperspb.BytesValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedNamedCacheServiceServer) RemoveIndex(context.Context, *RemoveIndexRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveIndex not implemented")
}
func (UnimplementedNamedCacheServiceServer) RemoveMapping(context.Context, *RemoveMappingRequest) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMapping not implemented")
}
func (UnimplementedNamedCacheServiceServer) Replace(context.Context, *ReplaceRequest) (*wrapperspb.BytesValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Replace not implemented")
}
func (UnimplementedNamedCacheServiceServer) ReplaceMapping(context.Context, *ReplaceMappingRequest) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplaceMapping not implemented")
}
func (UnimplementedNamedCacheServiceServer) Size(context.Context, *SizeRequest) (*wrapperspb.Int32Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Size not implemented")
}
func (UnimplementedNamedCacheServiceServer) Truncate(context.Context, *TruncateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Truncate not implemented")
}
func (UnimplementedNamedCacheServiceServer) Values(*ValuesRequest, grpc.ServerStreamingServer[wrapperspb.BytesValue]) error {
	return status.Errorf(codes.Unimplemented, "method Values not implemented")
}
func (UnimplementedNamedCacheServiceServer) mustEmbedUnimplementedNamedCacheServiceServer() {}
func (UnimplementedNamedCacheServiceServer) testEmbeddedByValue()                           {}

// UnsafeNamedCacheServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NamedCacheServiceServer will
// result in compilation errors.
type UnsafeNamedCacheServiceServer interface {
	mustEmbedUnimplementedNamedCacheServiceServer()
}

func RegisterNamedCacheServiceServer(s grpc.ServiceRegistrar, srv NamedCacheServiceServer) {
	// If the following call pancis, it indicates UnimplementedNamedCacheServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NamedCacheService_ServiceDesc, srv)
}

func _NamedCacheService_AddIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamedCacheServiceServer).AddIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NamedCacheService_AddIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamedCacheServiceServer).AddIndex(ctx, req.(*AddIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamedCacheService_Aggregate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggregateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamedCacheServiceServer).Aggregate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NamedCacheService_Aggregate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamedCacheServiceServer).Aggregate(ctx, req.(*AggregateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamedCacheService_Clear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamedCacheServiceServer).Clear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NamedCacheService_Clear_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamedCacheServiceServer).Clear(ctx, req.(*ClearRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamedCacheService_ContainsEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainsEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamedCacheServiceServer).ContainsEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NamedCacheService_ContainsEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamedCacheServiceServer).ContainsEntry(ctx, req.(*ContainsEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamedCacheService_ContainsKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainsKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamedCacheServiceServer).ContainsKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NamedCacheService_ContainsKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamedCacheServiceServer).ContainsKey(ctx, req.(*ContainsKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamedCacheService_ContainsValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainsValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamedCacheServiceServer).ContainsValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NamedCacheService_ContainsValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamedCacheServiceServer).ContainsValue(ctx, req.(*ContainsValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamedCacheService_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamedCacheServiceServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NamedCacheService_Destroy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamedCacheServiceServer).Destroy(ctx, req.(*DestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamedCacheService_EntrySet_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EntrySetRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NamedCacheServiceServer).EntrySet(m, &grpc.GenericServerStream[EntrySetRequest, Entry]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NamedCacheService_EntrySetServer = grpc.ServerStreamingServer[Entry]

func _NamedCacheService_Events_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NamedCacheServiceServer).Events(&grpc.GenericServerStream[MapListenerRequest, MapListenerResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NamedCacheService_EventsServer = grpc.BidiStreamingServer[MapListenerRequest, MapListenerResponse]

func _NamedCacheService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamedCacheServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NamedCacheService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamedCacheServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamedCacheService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAllRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NamedCacheServiceServer).GetAll(m, &grpc.GenericServerStream[GetAllRequest, Entry]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NamedCacheService_GetAllServer = grpc.ServerStreamingServer[Entry]

func _NamedCacheService_Invoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvokeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamedCacheServiceServer).Invoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NamedCacheService_Invoke_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamedCacheServiceServer).Invoke(ctx, req.(*InvokeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamedCacheService_InvokeAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InvokeAllRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NamedCacheServiceServer).InvokeAll(m, &grpc.GenericServerStream[InvokeAllRequest, Entry]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NamedCacheService_InvokeAllServer = grpc.ServerStreamingServer[Entry]

func _NamedCacheService_IsEmpty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsEmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamedCacheServiceServer).IsEmpty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NamedCacheService_IsEmpty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamedCacheServiceServer).IsEmpty(ctx, req.(*IsEmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamedCacheService_IsReady_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsReadyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamedCacheServiceServer).IsReady(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NamedCacheService_IsReady_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamedCacheServiceServer).IsReady(ctx, req.(*IsReadyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamedCacheService_KeySet_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(KeySetRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NamedCacheServiceServer).KeySet(m, &grpc.GenericServerStream[KeySetRequest, wrapperspb.BytesValue]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NamedCacheService_KeySetServer = grpc.ServerStreamingServer[wrapperspb.BytesValue]

func _NamedCacheService_NextEntrySetPage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NamedCacheServiceServer).NextEntrySetPage(m, &grpc.GenericServerStream[PageRequest, EntryResult]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NamedCacheService_NextEntrySetPageServer = grpc.ServerStreamingServer[EntryResult]

func _NamedCacheService_NextKeySetPage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NamedCacheServiceServer).NextKeySetPage(m, &grpc.GenericServerStream[PageRequest, wrapperspb.BytesValue]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NamedCacheService_NextKeySetPageServer = grpc.ServerStreamingServer[wrapperspb.BytesValue]

func _NamedCacheService_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamedCacheServiceServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NamedCacheService_Put_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamedCacheServiceServer).Put(ctx, req.(*PutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamedCacheService_PutAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamedCacheServiceServer).PutAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NamedCacheService_PutAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamedCacheServiceServer).PutAll(ctx, req.(*PutAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamedCacheService_PutIfAbsent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutIfAbsentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamedCacheServiceServer).PutIfAbsent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NamedCacheService_PutIfAbsent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamedCacheServiceServer).PutIfAbsent(ctx, req.(*PutIfAbsentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamedCacheService_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamedCacheServiceServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NamedCacheService_Remove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamedCacheServiceServer).Remove(ctx, req.(*RemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamedCacheService_RemoveIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamedCacheServiceServer).RemoveIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NamedCacheService_RemoveIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamedCacheServiceServer).RemoveIndex(ctx, req.(*RemoveIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamedCacheService_RemoveMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMappingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamedCacheServiceServer).RemoveMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NamedCacheService_RemoveMapping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamedCacheServiceServer).RemoveMapping(ctx, req.(*RemoveMappingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamedCacheService_Replace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamedCacheServiceServer).Replace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NamedCacheService_Replace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamedCacheServiceServer).Replace(ctx, req.(*ReplaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamedCacheService_ReplaceMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplaceMappingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamedCacheServiceServer).ReplaceMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NamedCacheService_ReplaceMapping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamedCacheServiceServer).ReplaceMapping(ctx, req.(*ReplaceMappingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamedCacheService_Size_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamedCacheServiceServer).Size(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NamedCacheService_Size_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamedCacheServiceServer).Size(ctx, req.(*SizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamedCacheService_Truncate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TruncateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamedCacheServiceServer).Truncate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NamedCacheService_Truncate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamedCacheServiceServer).Truncate(ctx, req.(*TruncateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamedCacheService_Values_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ValuesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NamedCacheServiceServer).Values(m, &grpc.GenericServerStream[ValuesRequest, wrapperspb.BytesValue]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NamedCacheService_ValuesServer = grpc.ServerStreamingServer[wrapperspb.BytesValue]

// NamedCacheService_ServiceDesc is the grpc.ServiceDesc for NamedCacheService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NamedCacheService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "coherence.NamedCacheService",
	HandlerType: (*NamedCacheServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "addIndex",
			Handler:    _NamedCacheService_AddIndex_Handler,
		},
		{
			MethodName: "aggregate",
			Handler:    _NamedCacheService_Aggregate_Handler,
		},
		{
			MethodName: "clear",
			Handler:    _NamedCacheService_Clear_Handler,
		},
		{
			MethodName: "containsEntry",
			Handler:    _NamedCacheService_ContainsEntry_Handler,
		},
		{
			MethodName: "containsKey",
			Handler:    _NamedCacheService_ContainsKey_Handler,
		},
		{
			MethodName: "containsValue",
			Handler:    _NamedCacheService_ContainsValue_Handler,
		},
		{
			MethodName: "destroy",
			Handler:    _NamedCacheService_Destroy_Handler,
		},
		{
			MethodName: "get",
			Handler:    _NamedCacheService_Get_Handler,
		},
		{
			MethodName: "invoke",
			Handler:    _NamedCacheService_Invoke_Handler,
		},
		{
			MethodName: "isEmpty",
			Handler:    _NamedCacheService_IsEmpty_Handler,
		},
		{
			MethodName: "isReady",
			Handler:    _NamedCacheService_IsReady_Handler,
		},
		{
			MethodName: "put",
			Handler:    _NamedCacheService_Put_Handler,
		},
		{
			MethodName: "putAll",
			Handler:    _NamedCacheService_PutAll_Handler,
		},
		{
			MethodName: "putIfAbsent",
			Handler:    _NamedCacheService_PutIfAbsent_Handler,
		},
		{
			MethodName: "remove",
			Handler:    _NamedCacheService_Remove_Handler,
		},
		{
			MethodName: "removeIndex",
			Handler:    _NamedCacheService_RemoveIndex_Handler,
		},
		{
			MethodName: "removeMapping",
			Handler:    _NamedCacheService_RemoveMapping_Handler,
		},
		{
			MethodName: "replace",
			Handler:    _NamedCacheService_Replace_Handler,
		},
		{
			MethodName: "replaceMapping",
			Handler:    _NamedCacheService_ReplaceMapping_Handler,
		},
		{
			MethodName: "size",
			Handler:    _NamedCacheService_Size_Handler,
		},
		{
			MethodName: "truncate",
			Handler:    _NamedCacheService_Truncate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "entrySet",
			Handler:       _NamedCacheService_EntrySet_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "events",
			Handler:       _NamedCacheService_Events_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "getAll",
			Handler:       _NamedCacheService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "invokeAll",
			Handler:       _NamedCacheService_InvokeAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "keySet",
			Handler:       _NamedCacheService_KeySet_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "nextEntrySetPage",
			Handler:       _NamedCacheService_NextEntrySetPage_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "nextKeySetPage",
			Handler:       _NamedCacheService_NextKeySetPage_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "values",
			Handler:       _NamedCacheService_Values_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "services.proto",
}
