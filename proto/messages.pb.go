//
// Copyright (c) 2020, 2023 Oracle and/or its affiliates.
//
// Licensed under the Universal Permissive License v 1.0 as shown at
// https://oss.oracle.com/licenses/upl.

// Authors:
//  Mahesh Kannan
//  Jonathan Knight

// NamedCacheService message types
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.19.2
// source: messages.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// An enum representing the request type
type MapListenerRequest_RequestType int32

const (
	// The request to initialise the channel.
	MapListenerRequest_INIT MapListenerRequest_RequestType = 0
	// The request is for a key listener.
	MapListenerRequest_KEY MapListenerRequest_RequestType = 1
	// The request is for a Filter listener.
	MapListenerRequest_FILTER MapListenerRequest_RequestType = 2
)

// Enum value maps for MapListenerRequest_RequestType.
var (
	MapListenerRequest_RequestType_name = map[int32]string{
		0: "INIT",
		1: "KEY",
		2: "FILTER",
	}
	MapListenerRequest_RequestType_value = map[string]int32{
		"INIT":   0,
		"KEY":    1,
		"FILTER": 2,
	}
)

func (x MapListenerRequest_RequestType) Enum() *MapListenerRequest_RequestType {
	p := new(MapListenerRequest_RequestType)
	*p = x
	return p
}

func (x MapListenerRequest_RequestType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MapListenerRequest_RequestType) Descriptor() protoreflect.EnumDescriptor {
	return file_messages_proto_enumTypes[0].Descriptor()
}

func (MapListenerRequest_RequestType) Type() protoreflect.EnumType {
	return &file_messages_proto_enumTypes[0]
}

func (x MapListenerRequest_RequestType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MapListenerRequest_RequestType.Descriptor instead.
func (MapListenerRequest_RequestType) EnumDescriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{29, 0}
}

// An enum of TransformationState values to describes how a CacheEvent has been or should be transformed.
type MapEventResponse_TransformationState int32

const (
	// Value used to indicate that an event is non-transformable and should
	// not be passed to any transformer-based listeners.
	MapEventResponse_NON_TRANSFORMABLE MapEventResponse_TransformationState = 0
	// Value used to indicate that an event is transformable and could be
	// passed to transformer-based listeners.
	MapEventResponse_TRANSFORMABLE MapEventResponse_TransformationState = 1
	// Value used to indicate that an event has been transformed, and should
	// only be passed to transformer-based listeners.
	MapEventResponse_TRANSFORMED MapEventResponse_TransformationState = 2
)

// Enum value maps for MapEventResponse_TransformationState.
var (
	MapEventResponse_TransformationState_name = map[int32]string{
		0: "NON_TRANSFORMABLE",
		1: "TRANSFORMABLE",
		2: "TRANSFORMED",
	}
	MapEventResponse_TransformationState_value = map[string]int32{
		"NON_TRANSFORMABLE": 0,
		"TRANSFORMABLE":     1,
		"TRANSFORMED":       2,
	}
)

func (x MapEventResponse_TransformationState) Enum() *MapEventResponse_TransformationState {
	p := new(MapEventResponse_TransformationState)
	*p = x
	return p
}

func (x MapEventResponse_TransformationState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MapEventResponse_TransformationState) Descriptor() protoreflect.EnumDescriptor {
	return file_messages_proto_enumTypes[1].Descriptor()
}

func (MapEventResponse_TransformationState) Type() protoreflect.EnumType {
	return &file_messages_proto_enumTypes[1]
}

func (x MapEventResponse_TransformationState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MapEventResponse_TransformationState.Descriptor instead.
func (MapEventResponse_TransformationState) EnumDescriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{36, 0}
}

// A request to clear all the entries in the cache.
type ClearRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The scope name to use to obtain the cache.
	Scope string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	// The name of the cache.
	Cache string `protobuf:"bytes,2,opt,name=cache,proto3" json:"cache,omitempty"`
}

func (x *ClearRequest) Reset() {
	*x = ClearRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClearRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearRequest) ProtoMessage() {}

func (x *ClearRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearRequest.ProtoReflect.Descriptor instead.
func (*ClearRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{0}
}

func (x *ClearRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *ClearRequest) GetCache() string {
	if x != nil {
		return x.Cache
	}
	return ""
}

// A request to determine whether an entry exists in a cache
// with a specific key and value.
type ContainsEntryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The scope name to use to obtain the cache.
	Scope string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	// The name of the cache.
	Cache string `protobuf:"bytes,2,opt,name=cache,proto3" json:"cache,omitempty"`
	// The serialization format.
	Format string `protobuf:"bytes,3,opt,name=format,proto3" json:"format,omitempty"`
	// The serialization format.
	Key []byte `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	// The value of the entry to verify.
	Value []byte `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ContainsEntryRequest) Reset() {
	*x = ContainsEntryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainsEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainsEntryRequest) ProtoMessage() {}

func (x *ContainsEntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainsEntryRequest.ProtoReflect.Descriptor instead.
func (*ContainsEntryRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{1}
}

func (x *ContainsEntryRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *ContainsEntryRequest) GetCache() string {
	if x != nil {
		return x.Cache
	}
	return ""
}

func (x *ContainsEntryRequest) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *ContainsEntryRequest) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *ContainsEntryRequest) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// A request to determine whether an entry exists in a cache
// for the specified key.
type ContainsKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The scope name to use to obtain the cache.
	Scope string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	// The name of the cache.
	Cache string `protobuf:"bytes,2,opt,name=cache,proto3" json:"cache,omitempty"`
	// The serialization format.
	Format string `protobuf:"bytes,3,opt,name=format,proto3" json:"format,omitempty"`
	// The key of the entry to verify.
	Key []byte `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *ContainsKeyRequest) Reset() {
	*x = ContainsKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainsKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainsKeyRequest) ProtoMessage() {}

func (x *ContainsKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainsKeyRequest.ProtoReflect.Descriptor instead.
func (*ContainsKeyRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{2}
}

func (x *ContainsKeyRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *ContainsKeyRequest) GetCache() string {
	if x != nil {
		return x.Cache
	}
	return ""
}

func (x *ContainsKeyRequest) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *ContainsKeyRequest) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

// A request to determine whether an entry exists in a cache
// with the specified value.
type ContainsValueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The scope name to use to obtain the cache.
	Scope string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	// The name of the cache.
	Cache string `protobuf:"bytes,2,opt,name=cache,proto3" json:"cache,omitempty"`
	// The serialization format.
	Format string `protobuf:"bytes,3,opt,name=format,proto3" json:"format,omitempty"`
	// The value of the entry to verify.
	Value []byte `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ContainsValueRequest) Reset() {
	*x = ContainsValueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainsValueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainsValueRequest) ProtoMessage() {}

func (x *ContainsValueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainsValueRequest.ProtoReflect.Descriptor instead.
func (*ContainsValueRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{3}
}

func (x *ContainsValueRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *ContainsValueRequest) GetCache() string {
	if x != nil {
		return x.Cache
	}
	return ""
}

func (x *ContainsValueRequest) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *ContainsValueRequest) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// A request to destroy a cache.
type DestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The scope name to use to obtain the cache.
	Scope string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	// The name of the cache.
	Cache string `protobuf:"bytes,2,opt,name=cache,proto3" json:"cache,omitempty"`
}

func (x *DestroyRequest) Reset() {
	*x = DestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroyRequest) ProtoMessage() {}

func (x *DestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroyRequest.ProtoReflect.Descriptor instead.
func (*DestroyRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{4}
}

func (x *DestroyRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *DestroyRequest) GetCache() string {
	if x != nil {
		return x.Cache
	}
	return ""
}

// A request to determine whether a cache is empty or not.
type IsEmptyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The scope name to use to obtain the cache.
	Scope string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	// The name of the cache.
	Cache string `protobuf:"bytes,2,opt,name=cache,proto3" json:"cache,omitempty"`
}

func (x *IsEmptyRequest) Reset() {
	*x = IsEmptyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsEmptyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsEmptyRequest) ProtoMessage() {}

func (x *IsEmptyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsEmptyRequest.ProtoReflect.Descriptor instead.
func (*IsEmptyRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{5}
}

func (x *IsEmptyRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *IsEmptyRequest) GetCache() string {
	if x != nil {
		return x.Cache
	}
	return ""
}

// A request to determine the number of entries in a cache.
type SizeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The scope name to use to obtain the cache.
	Scope string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	// The name of the cache.
	Cache string `protobuf:"bytes,2,opt,name=cache,proto3" json:"cache,omitempty"`
}

func (x *SizeRequest) Reset() {
	*x = SizeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SizeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SizeRequest) ProtoMessage() {}

func (x *SizeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SizeRequest.ProtoReflect.Descriptor instead.
func (*SizeRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{6}
}

func (x *SizeRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *SizeRequest) GetCache() string {
	if x != nil {
		return x.Cache
	}
	return ""
}

// A request to obtain the value to which a cache maps the
// specified key.
type GetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The scope name to use to obtain the cache.
	Scope string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	// The name of the cache.
	Cache string `protobuf:"bytes,2,opt,name=cache,proto3" json:"cache,omitempty"`
	// The serialization format.
	Format string `protobuf:"bytes,3,opt,name=format,proto3" json:"format,omitempty"`
	// The key of the entry to retrieve.
	Key []byte `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *GetRequest) Reset() {
	*x = GetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRequest) ProtoMessage() {}

func (x *GetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRequest.ProtoReflect.Descriptor instead.
func (*GetRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{7}
}

func (x *GetRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *GetRequest) GetCache() string {
	if x != nil {
		return x.Cache
	}
	return ""
}

func (x *GetRequest) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *GetRequest) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

// A request to obtain the values that map to the specified keys
type GetAllRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The scope name to use to obtain the cache.
	Scope string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	// The name of the cache.
	Cache string `protobuf:"bytes,2,opt,name=cache,proto3" json:"cache,omitempty"`
	// The serialization format.
	Format string `protobuf:"bytes,3,opt,name=format,proto3" json:"format,omitempty"`
	// The key of the entry to retrieve.
	Key [][]byte `protobuf:"bytes,4,rep,name=key,proto3" json:"key,omitempty"`
}

func (x *GetAllRequest) Reset() {
	*x = GetAllRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllRequest) ProtoMessage() {}

func (x *GetAllRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllRequest.ProtoReflect.Descriptor instead.
func (*GetAllRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{8}
}

func (x *GetAllRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *GetAllRequest) GetCache() string {
	if x != nil {
		return x.Cache
	}
	return ""
}

func (x *GetAllRequest) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *GetAllRequest) GetKey() [][]byte {
	if x != nil {
		return x.Key
	}
	return nil
}

// A request to associate the specified value with the
// specified key in a cache.
type PutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The scope name to use to obtain the cache.
	Scope string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	// The name of the cache.
	Cache string `protobuf:"bytes,2,opt,name=cache,proto3" json:"cache,omitempty"`
	// The serialization format.
	Format string `protobuf:"bytes,3,opt,name=format,proto3" json:"format,omitempty"`
	// The cache entry key.
	Key []byte `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	// The value of the entry.
	Value []byte `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	// The time to live in millis.
	Ttl int64 `protobuf:"varint,6,opt,name=ttl,proto3" json:"ttl,omitempty"`
}

func (x *PutRequest) Reset() {
	*x = PutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutRequest) ProtoMessage() {}

func (x *PutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutRequest.ProtoReflect.Descriptor instead.
func (*PutRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{9}
}

func (x *PutRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *PutRequest) GetCache() string {
	if x != nil {
		return x.Cache
	}
	return ""
}

func (x *PutRequest) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *PutRequest) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *PutRequest) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *PutRequest) GetTtl() int64 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

// A request to associate the specified value with the
// specified key in a cache.
type PutAllRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The scope name to use to obtain the cache.
	Scope string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	// The name of the cache.
	Cache string `protobuf:"bytes,2,opt,name=cache,proto3" json:"cache,omitempty"`
	// The serialization format.
	Format string `protobuf:"bytes,3,opt,name=format,proto3" json:"format,omitempty"`
	// The cache entries to put.
	Entry []*Entry `protobuf:"bytes,4,rep,name=entry,proto3" json:"entry,omitempty"`
}

func (x *PutAllRequest) Reset() {
	*x = PutAllRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutAllRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutAllRequest) ProtoMessage() {}

func (x *PutAllRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutAllRequest.ProtoReflect.Descriptor instead.
func (*PutAllRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{10}
}

func (x *PutAllRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *PutAllRequest) GetCache() string {
	if x != nil {
		return x.Cache
	}
	return ""
}

func (x *PutAllRequest) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *PutAllRequest) GetEntry() []*Entry {
	if x != nil {
		return x.Entry
	}
	return nil
}

// A request to associate the specified value with the
// specified key in a cache only if the specified key
// is not associated with any value (including null).
type PutIfAbsentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The scope name to use to obtain the cache.
	Scope string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	// The name of the cache.
	Cache string `protobuf:"bytes,2,opt,name=cache,proto3" json:"cache,omitempty"`
	// The serialization format.
	Format string `protobuf:"bytes,3,opt,name=format,proto3" json:"format,omitempty"`
	// The cache entry key.
	Key []byte `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	// The value to be put.
	Value []byte `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	// The time to live in millis.
	Ttl int64 `protobuf:"varint,6,opt,name=ttl,proto3" json:"ttl,omitempty"`
}

func (x *PutIfAbsentRequest) Reset() {
	*x = PutIfAbsentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutIfAbsentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutIfAbsentRequest) ProtoMessage() {}

func (x *PutIfAbsentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutIfAbsentRequest.ProtoReflect.Descriptor instead.
func (*PutIfAbsentRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{11}
}

func (x *PutIfAbsentRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *PutIfAbsentRequest) GetCache() string {
	if x != nil {
		return x.Cache
	}
	return ""
}

func (x *PutIfAbsentRequest) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *PutIfAbsentRequest) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *PutIfAbsentRequest) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *PutIfAbsentRequest) GetTtl() int64 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

// A request to remove the mapping for a key from a cache
// if it is present.
type RemoveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The scope name to use to obtain the cache.
	Scope string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	// The name of the cache.
	Cache string `protobuf:"bytes,2,opt,name=cache,proto3" json:"cache,omitempty"`
	// The serialization format.
	Format string `protobuf:"bytes,3,opt,name=format,proto3" json:"format,omitempty"`
	// The key of the entry to be removed.
	Key []byte `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *RemoveRequest) Reset() {
	*x = RemoveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveRequest) ProtoMessage() {}

func (x *RemoveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveRequest.ProtoReflect.Descriptor instead.
func (*RemoveRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{12}
}

func (x *RemoveRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *RemoveRequest) GetCache() string {
	if x != nil {
		return x.Cache
	}
	return ""
}

func (x *RemoveRequest) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *RemoveRequest) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

// A request to remove the mapping for a key from a cache
// only if the specified key is associated with the specified
// value in that cache.
type RemoveMappingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The scope name to use to obtain the cache.
	Scope string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	// The name of the cache.
	Cache string `protobuf:"bytes,2,opt,name=cache,proto3" json:"cache,omitempty"`
	// The serialization format.
	Format string `protobuf:"bytes,3,opt,name=format,proto3" json:"format,omitempty"`
	// The key of the entry to be removed.
	Key []byte `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	// The value of the entry to verify.
	Value []byte `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *RemoveMappingRequest) Reset() {
	*x = RemoveMappingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveMappingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveMappingRequest) ProtoMessage() {}

func (x *RemoveMappingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveMappingRequest.ProtoReflect.Descriptor instead.
func (*RemoveMappingRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{13}
}

func (x *RemoveMappingRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *RemoveMappingRequest) GetCache() string {
	if x != nil {
		return x.Cache
	}
	return ""
}

func (x *RemoveMappingRequest) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *RemoveMappingRequest) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *RemoveMappingRequest) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// A request to replace the mapping for the specified key
// with the specified value in a cache only if the specified
// key is associated with some value in that cache.
type ReplaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The scope name to use to obtain the cache.
	Scope string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	// The name of the cache.
	Cache string `protobuf:"bytes,2,opt,name=cache,proto3" json:"cache,omitempty"`
	// The serialization format.
	Format string `protobuf:"bytes,3,opt,name=format,proto3" json:"format,omitempty"`
	// The key of the entry to be replaced.
	Key []byte `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	// The value of the entry to be replaced.
	Value []byte `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ReplaceRequest) Reset() {
	*x = ReplaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceRequest) ProtoMessage() {}

func (x *ReplaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceRequest.ProtoReflect.Descriptor instead.
func (*ReplaceRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{14}
}

func (x *ReplaceRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *ReplaceRequest) GetCache() string {
	if x != nil {
		return x.Cache
	}
	return ""
}

func (x *ReplaceRequest) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *ReplaceRequest) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *ReplaceRequest) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// A request to replace the mapping for the specified key
// with the specified newValue in a cache only if the specified
// key is associated with the specified previousValue in
// that cache.
type ReplaceMappingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The scope name to use to obtain the cache.
	Scope string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	// The name of the cache.
	Cache string `protobuf:"bytes,2,opt,name=cache,proto3" json:"cache,omitempty"`
	// The serialization format.
	Format string `protobuf:"bytes,3,opt,name=format,proto3" json:"format,omitempty"`
	// The key of the entry to be replaced.
	Key []byte `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	// The previous value that should exist in the cache.
	PreviousValue []byte `protobuf:"bytes,5,opt,name=previousValue,proto3" json:"previousValue,omitempty"`
	// The new value to put.
	NewValue []byte `protobuf:"bytes,6,opt,name=newValue,proto3" json:"newValue,omitempty"`
}

func (x *ReplaceMappingRequest) Reset() {
	*x = ReplaceMappingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplaceMappingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceMappingRequest) ProtoMessage() {}

func (x *ReplaceMappingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceMappingRequest.ProtoReflect.Descriptor instead.
func (*ReplaceMappingRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{15}
}

func (x *ReplaceMappingRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *ReplaceMappingRequest) GetCache() string {
	if x != nil {
		return x.Cache
	}
	return ""
}

func (x *ReplaceMappingRequest) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *ReplaceMappingRequest) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *ReplaceMappingRequest) GetPreviousValue() []byte {
	if x != nil {
		return x.PreviousValue
	}
	return nil
}

func (x *ReplaceMappingRequest) GetNewValue() []byte {
	if x != nil {
		return x.NewValue
	}
	return nil
}

// A request for a page of data from a cache.
// This request is used for implementing methods such as NamedCache.keySet(),
// NamedCache.entrySet() and NamedCache.values() where it would be impractical
// to return the whole data set in one response.
type PageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The scope name to use to obtain the cache.
	Scope string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	// The name of the cache.
	Cache string `protobuf:"bytes,2,opt,name=cache,proto3" json:"cache,omitempty"`
	// The serialization format
	Format string `protobuf:"bytes,3,opt,name=format,proto3" json:"format,omitempty"`
	// An opaque cookie to track the requested page.
	Cookie []byte `protobuf:"bytes,4,opt,name=cookie,proto3" json:"cookie,omitempty"`
}

func (x *PageRequest) Reset() {
	*x = PageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageRequest) ProtoMessage() {}

func (x *PageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageRequest.ProtoReflect.Descriptor instead.
func (*PageRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{16}
}

func (x *PageRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *PageRequest) GetCache() string {
	if x != nil {
		return x.Cache
	}
	return ""
}

func (x *PageRequest) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *PageRequest) GetCookie() []byte {
	if x != nil {
		return x.Cookie
	}
	return nil
}

// A cache entry key/value pair.
type EntryResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The cache entry key.
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The cache entry value.
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// An opaque cookie to track the requested page.
	Cookie []byte `protobuf:"bytes,3,opt,name=cookie,proto3" json:"cookie,omitempty"`
}

func (x *EntryResult) Reset() {
	*x = EntryResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntryResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntryResult) ProtoMessage() {}

func (x *EntryResult) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntryResult.ProtoReflect.Descriptor instead.
func (*EntryResult) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{17}
}

func (x *EntryResult) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *EntryResult) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *EntryResult) GetCookie() []byte {
	if x != nil {
		return x.Cookie
	}
	return nil
}

// A key value pair.
type Entry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The cache entry key.
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The value of the entry.
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Entry) Reset() {
	*x = Entry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entry) ProtoMessage() {}

func (x *Entry) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entry.ProtoReflect.Descriptor instead.
func (*Entry) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{18}
}

func (x *Entry) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Entry) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// A request to truncate a cache.
type TruncateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The scope name to use to obtain the cache.
	Scope string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	// The name of the cache.
	Cache string `protobuf:"bytes,2,opt,name=cache,proto3" json:"cache,omitempty"`
}

func (x *TruncateRequest) Reset() {
	*x = TruncateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TruncateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TruncateRequest) ProtoMessage() {}

func (x *TruncateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TruncateRequest.ProtoReflect.Descriptor instead.
func (*TruncateRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{19}
}

func (x *TruncateRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *TruncateRequest) GetCache() string {
	if x != nil {
		return x.Cache
	}
	return ""
}

// A request to add an index to a cache
type AddIndexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The scope name to use to obtain the cache.
	Scope string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	// The name of the cache.
	Cache string `protobuf:"bytes,2,opt,name=cache,proto3" json:"cache,omitempty"`
	// The serialization format.
	Format string `protobuf:"bytes,3,opt,name=format,proto3" json:"format,omitempty"`
	// The serialized ValueExtractor to use to create the index.
	Extractor []byte `protobuf:"bytes,4,opt,name=extractor,proto3" json:"extractor,omitempty"`
	// A flag indicating whether to sort the index.
	Sorted bool `protobuf:"varint,5,opt,name=sorted,proto3" json:"sorted,omitempty"`
	// The optional comparator to use to sort the index.
	Comparator []byte `protobuf:"bytes,6,opt,name=comparator,proto3" json:"comparator,omitempty"`
}

func (x *AddIndexRequest) Reset() {
	*x = AddIndexRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddIndexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddIndexRequest) ProtoMessage() {}

func (x *AddIndexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddIndexRequest.ProtoReflect.Descriptor instead.
func (*AddIndexRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{20}
}

func (x *AddIndexRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *AddIndexRequest) GetCache() string {
	if x != nil {
		return x.Cache
	}
	return ""
}

func (x *AddIndexRequest) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *AddIndexRequest) GetExtractor() []byte {
	if x != nil {
		return x.Extractor
	}
	return nil
}

func (x *AddIndexRequest) GetSorted() bool {
	if x != nil {
		return x.Sorted
	}
	return false
}

func (x *AddIndexRequest) GetComparator() []byte {
	if x != nil {
		return x.Comparator
	}
	return nil
}

// A request to remove an index from a cache
type RemoveIndexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The scope name to use to obtain the cache.
	Scope string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	// The name of the cache.
	Cache string `protobuf:"bytes,2,opt,name=cache,proto3" json:"cache,omitempty"`
	// The serialization format.
	Format string `protobuf:"bytes,3,opt,name=format,proto3" json:"format,omitempty"`
	// The serialized ValueExtractor to use to create the index.
	Extractor []byte `protobuf:"bytes,4,opt,name=extractor,proto3" json:"extractor,omitempty"`
}

func (x *RemoveIndexRequest) Reset() {
	*x = RemoveIndexRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveIndexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveIndexRequest) ProtoMessage() {}

func (x *RemoveIndexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveIndexRequest.ProtoReflect.Descriptor instead.
func (*RemoveIndexRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{21}
}

func (x *RemoveIndexRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *RemoveIndexRequest) GetCache() string {
	if x != nil {
		return x.Cache
	}
	return ""
}

func (x *RemoveIndexRequest) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *RemoveIndexRequest) GetExtractor() []byte {
	if x != nil {
		return x.Extractor
	}
	return nil
}

// A request to aggreagte entries in a cache.
type AggregateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The scope name to use to obtain the cache.
	Scope string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	// The name of the cache.
	Cache string `protobuf:"bytes,2,opt,name=cache,proto3" json:"cache,omitempty"`
	// The serialization format.
	Format string `protobuf:"bytes,3,opt,name=format,proto3" json:"format,omitempty"`
	// The serialized EntryAggregator to aggregate.
	Aggregator []byte `protobuf:"bytes,4,opt,name=aggregator,proto3" json:"aggregator,omitempty"`
	// The optional set of serialized keys of the entries to aggregate.
	Keys [][]byte `protobuf:"bytes,5,rep,name=keys,proto3" json:"keys,omitempty"`
	// The optional serialized Filter to identify the entries to aggregate.
	Filter []byte `protobuf:"bytes,6,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *AggregateRequest) Reset() {
	*x = AggregateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregateRequest) ProtoMessage() {}

func (x *AggregateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregateRequest.ProtoReflect.Descriptor instead.
func (*AggregateRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{22}
}

func (x *AggregateRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *AggregateRequest) GetCache() string {
	if x != nil {
		return x.Cache
	}
	return ""
}

func (x *AggregateRequest) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *AggregateRequest) GetAggregator() []byte {
	if x != nil {
		return x.Aggregator
	}
	return nil
}

func (x *AggregateRequest) GetKeys() [][]byte {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *AggregateRequest) GetFilter() []byte {
	if x != nil {
		return x.Filter
	}
	return nil
}

// A request to invoke an EntryProcessor against a single entry.
type InvokeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The scope name to use to obtain the cache.
	Scope string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	// The name of the cache.
	Cache string `protobuf:"bytes,2,opt,name=cache,proto3" json:"cache,omitempty"`
	// The serialization format.
	Format string `protobuf:"bytes,3,opt,name=format,proto3" json:"format,omitempty"`
	// The serialized EntryProcessor to invoke.
	Processor []byte `protobuf:"bytes,4,opt,name=processor,proto3" json:"processor,omitempty"`
	// The serialized key of the entry to process.
	Key []byte `protobuf:"bytes,5,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *InvokeRequest) Reset() {
	*x = InvokeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvokeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvokeRequest) ProtoMessage() {}

func (x *InvokeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvokeRequest.ProtoReflect.Descriptor instead.
func (*InvokeRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{23}
}

func (x *InvokeRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *InvokeRequest) GetCache() string {
	if x != nil {
		return x.Cache
	}
	return ""
}

func (x *InvokeRequest) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *InvokeRequest) GetProcessor() []byte {
	if x != nil {
		return x.Processor
	}
	return nil
}

func (x *InvokeRequest) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

// A request to invoke an entry processor against a number of entries.
type InvokeAllRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The scope name to use to obtain the cache.
	Scope string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	// The name of the cache.
	Cache string `protobuf:"bytes,2,opt,name=cache,proto3" json:"cache,omitempty"`
	// The serialization format.
	Format string `protobuf:"bytes,3,opt,name=format,proto3" json:"format,omitempty"`
	// The serialized EntryProcessor to invoke.
	Processor []byte `protobuf:"bytes,4,opt,name=processor,proto3" json:"processor,omitempty"`
	// The optional set of serialized keys of the entries to process.
	Keys [][]byte `protobuf:"bytes,5,rep,name=keys,proto3" json:"keys,omitempty"`
	// The optional serialized Filter to identify the entries to process.
	Filter []byte `protobuf:"bytes,6,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *InvokeAllRequest) Reset() {
	*x = InvokeAllRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvokeAllRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvokeAllRequest) ProtoMessage() {}

func (x *InvokeAllRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvokeAllRequest.ProtoReflect.Descriptor instead.
func (*InvokeAllRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{24}
}

func (x *InvokeAllRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *InvokeAllRequest) GetCache() string {
	if x != nil {
		return x.Cache
	}
	return ""
}

func (x *InvokeAllRequest) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *InvokeAllRequest) GetProcessor() []byte {
	if x != nil {
		return x.Processor
	}
	return nil
}

func (x *InvokeAllRequest) GetKeys() [][]byte {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *InvokeAllRequest) GetFilter() []byte {
	if x != nil {
		return x.Filter
	}
	return nil
}

// A request to get a set of entries from a cache.
type EntrySetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The scope name to use to obtain the cache.
	Scope string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	// The name of the cache.
	Cache string `protobuf:"bytes,2,opt,name=cache,proto3" json:"cache,omitempty"`
	// The serialization format.
	Format string `protobuf:"bytes,3,opt,name=format,proto3" json:"format,omitempty"`
	// The serialized Filter to identify the entries to return.
	Filter []byte `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	// The optional comparator to use to sort the returned entries.
	Comparator []byte `protobuf:"bytes,5,opt,name=comparator,proto3" json:"comparator,omitempty"`
}

func (x *EntrySetRequest) Reset() {
	*x = EntrySetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntrySetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntrySetRequest) ProtoMessage() {}

func (x *EntrySetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntrySetRequest.ProtoReflect.Descriptor instead.
func (*EntrySetRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{25}
}

func (x *EntrySetRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *EntrySetRequest) GetCache() string {
	if x != nil {
		return x.Cache
	}
	return ""
}

func (x *EntrySetRequest) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *EntrySetRequest) GetFilter() []byte {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *EntrySetRequest) GetComparator() []byte {
	if x != nil {
		return x.Comparator
	}
	return nil
}

// A request to get a set of keys from a cache.
type KeySetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The scope name to use to obtain the cache.
	Scope string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	// The name of the cache.
	Cache string `protobuf:"bytes,2,opt,name=cache,proto3" json:"cache,omitempty"`
	// The serialization format.
	Format string `protobuf:"bytes,3,opt,name=format,proto3" json:"format,omitempty"`
	// The serialized Filter to identify the keys to return.
	Filter []byte `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *KeySetRequest) Reset() {
	*x = KeySetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeySetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeySetRequest) ProtoMessage() {}

func (x *KeySetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeySetRequest.ProtoReflect.Descriptor instead.
func (*KeySetRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{26}
}

func (x *KeySetRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *KeySetRequest) GetCache() string {
	if x != nil {
		return x.Cache
	}
	return ""
}

func (x *KeySetRequest) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *KeySetRequest) GetFilter() []byte {
	if x != nil {
		return x.Filter
	}
	return nil
}

// A request to get a collection of values from a cache.
type ValuesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The scope name to use to obtain the cache.
	Scope string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	// The name of the cache.
	Cache string `protobuf:"bytes,2,opt,name=cache,proto3" json:"cache,omitempty"`
	// The serialization format.
	Format string `protobuf:"bytes,3,opt,name=format,proto3" json:"format,omitempty"`
	// The serialized Filter to identify the values to return.
	Filter []byte `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	// The optional comparator to use to sort the returned values.
	Comparator []byte `protobuf:"bytes,5,opt,name=comparator,proto3" json:"comparator,omitempty"`
}

func (x *ValuesRequest) Reset() {
	*x = ValuesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValuesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValuesRequest) ProtoMessage() {}

func (x *ValuesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValuesRequest.ProtoReflect.Descriptor instead.
func (*ValuesRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{27}
}

func (x *ValuesRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *ValuesRequest) GetCache() string {
	if x != nil {
		return x.Cache
	}
	return ""
}

func (x *ValuesRequest) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *ValuesRequest) GetFilter() []byte {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *ValuesRequest) GetComparator() []byte {
	if x != nil {
		return x.Comparator
	}
	return nil
}

// An optional value.
type OptionalValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A flag indicating whether the value is present.
	Present bool `protobuf:"varint,1,opt,name=present,proto3" json:"present,omitempty"`
	// The serialized value.
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *OptionalValue) Reset() {
	*x = OptionalValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptionalValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionalValue) ProtoMessage() {}

func (x *OptionalValue) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionalValue.ProtoReflect.Descriptor instead.
func (*OptionalValue) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{28}
}

func (x *OptionalValue) GetPresent() bool {
	if x != nil {
		return x.Present
	}
	return false
}

func (x *OptionalValue) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// A message to subscribe to or unsubscribe from MapEvents for a cache.
type MapListenerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The scope name to use to obtain the cache.
	Scope string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	// The name of the cache.
	Cache string `protobuf:"bytes,2,opt,name=cache,proto3" json:"cache,omitempty"`
	// The serialization format.
	Format string `protobuf:"bytes,3,opt,name=format,proto3" json:"format,omitempty"`
	// A unique identifier for the request so that the client
	// can match a request to a response
	Uid string `protobuf:"bytes,4,opt,name=uid,proto3" json:"uid,omitempty"`
	// The type of the request.
	Type MapListenerRequest_RequestType `protobuf:"varint,5,opt,name=type,proto3,enum=coherence.MapListenerRequest_RequestType" json:"type,omitempty"`
	// The serialized Filter to identify the entries to subscribe to.
	Filter []byte `protobuf:"bytes,6,opt,name=filter,proto3" json:"filter,omitempty"`
	// The serialized key to identify the entry to subscribe to.
	Key []byte `protobuf:"bytes,7,opt,name=key,proto3" json:"key,omitempty"`
	// A flag set to true to indicate that the MapEvent objects do
	// not have to include the OldValue and NewValue property values
	// in order to allow optimizations
	Lite bool `protobuf:"varint,8,opt,name=lite,proto3" json:"lite,omitempty"`
	// A flag indicating whether to subscribe to (true) or unsubscribe from (false) events.
	Subscribe bool `protobuf:"varint,9,opt,name=subscribe,proto3" json:"subscribe,omitempty"`
	// A flag set to true to indicate that the listener is a priming listener.
	Priming bool `protobuf:"varint,10,opt,name=priming,proto3" json:"priming,omitempty"`
	// An optional serialized MapTrigger.
	Trigger []byte `protobuf:"bytes,11,opt,name=trigger,proto3" json:"trigger,omitempty"`
	// A unique filter identifier.
	FilterId int64 `protobuf:"varint,12,opt,name=filterId,proto3" json:"filterId,omitempty"`
}

func (x *MapListenerRequest) Reset() {
	*x = MapListenerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapListenerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapListenerRequest) ProtoMessage() {}

func (x *MapListenerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapListenerRequest.ProtoReflect.Descriptor instead.
func (*MapListenerRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{29}
}

func (x *MapListenerRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *MapListenerRequest) GetCache() string {
	if x != nil {
		return x.Cache
	}
	return ""
}

func (x *MapListenerRequest) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *MapListenerRequest) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *MapListenerRequest) GetType() MapListenerRequest_RequestType {
	if x != nil {
		return x.Type
	}
	return MapListenerRequest_INIT
}

func (x *MapListenerRequest) GetFilter() []byte {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *MapListenerRequest) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *MapListenerRequest) GetLite() bool {
	if x != nil {
		return x.Lite
	}
	return false
}

func (x *MapListenerRequest) GetSubscribe() bool {
	if x != nil {
		return x.Subscribe
	}
	return false
}

func (x *MapListenerRequest) GetPriming() bool {
	if x != nil {
		return x.Priming
	}
	return false
}

func (x *MapListenerRequest) GetTrigger() []byte {
	if x != nil {
		return x.Trigger
	}
	return nil
}

func (x *MapListenerRequest) GetFilterId() int64 {
	if x != nil {
		return x.FilterId
	}
	return 0
}

// A response to indicate that a MapListener was subscribed to a cache.
type MapListenerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A response can be one of either a subscribed response or an event response.
	//
	// Types that are assignable to ResponseType:
	//
	//	*MapListenerResponse_Subscribed
	//	*MapListenerResponse_Unsubscribed
	//	*MapListenerResponse_Event
	//	*MapListenerResponse_Error
	//	*MapListenerResponse_Destroyed
	//	*MapListenerResponse_Truncated
	ResponseType isMapListenerResponse_ResponseType `protobuf_oneof:"response_type"`
}

func (x *MapListenerResponse) Reset() {
	*x = MapListenerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapListenerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapListenerResponse) ProtoMessage() {}

func (x *MapListenerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapListenerResponse.ProtoReflect.Descriptor instead.
func (*MapListenerResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{30}
}

func (m *MapListenerResponse) GetResponseType() isMapListenerResponse_ResponseType {
	if m != nil {
		return m.ResponseType
	}
	return nil
}

func (x *MapListenerResponse) GetSubscribed() *MapListenerSubscribedResponse {
	if x, ok := x.GetResponseType().(*MapListenerResponse_Subscribed); ok {
		return x.Subscribed
	}
	return nil
}

func (x *MapListenerResponse) GetUnsubscribed() *MapListenerUnsubscribedResponse {
	if x, ok := x.GetResponseType().(*MapListenerResponse_Unsubscribed); ok {
		return x.Unsubscribed
	}
	return nil
}

func (x *MapListenerResponse) GetEvent() *MapEventResponse {
	if x, ok := x.GetResponseType().(*MapListenerResponse_Event); ok {
		return x.Event
	}
	return nil
}

func (x *MapListenerResponse) GetError() *MapListenerErrorResponse {
	if x, ok := x.GetResponseType().(*MapListenerResponse_Error); ok {
		return x.Error
	}
	return nil
}

func (x *MapListenerResponse) GetDestroyed() *CacheDestroyedResponse {
	if x, ok := x.GetResponseType().(*MapListenerResponse_Destroyed); ok {
		return x.Destroyed
	}
	return nil
}

func (x *MapListenerResponse) GetTruncated() *CacheTruncatedResponse {
	if x, ok := x.GetResponseType().(*MapListenerResponse_Truncated); ok {
		return x.Truncated
	}
	return nil
}

type isMapListenerResponse_ResponseType interface {
	isMapListenerResponse_ResponseType()
}

type MapListenerResponse_Subscribed struct {
	Subscribed *MapListenerSubscribedResponse `protobuf:"bytes,1,opt,name=subscribed,proto3,oneof"`
}

type MapListenerResponse_Unsubscribed struct {
	Unsubscribed *MapListenerUnsubscribedResponse `protobuf:"bytes,2,opt,name=unsubscribed,proto3,oneof"`
}

type MapListenerResponse_Event struct {
	Event *MapEventResponse `protobuf:"bytes,3,opt,name=event,proto3,oneof"`
}

type MapListenerResponse_Error struct {
	Error *MapListenerErrorResponse `protobuf:"bytes,4,opt,name=error,proto3,oneof"`
}

type MapListenerResponse_Destroyed struct {
	Destroyed *CacheDestroyedResponse `protobuf:"bytes,5,opt,name=destroyed,proto3,oneof"`
}

type MapListenerResponse_Truncated struct {
	Truncated *CacheTruncatedResponse `protobuf:"bytes,6,opt,name=truncated,proto3,oneof"`
}

func (*MapListenerResponse_Subscribed) isMapListenerResponse_ResponseType() {}

func (*MapListenerResponse_Unsubscribed) isMapListenerResponse_ResponseType() {}

func (*MapListenerResponse_Event) isMapListenerResponse_ResponseType() {}

func (*MapListenerResponse_Error) isMapListenerResponse_ResponseType() {}

func (*MapListenerResponse_Destroyed) isMapListenerResponse_ResponseType() {}

func (*MapListenerResponse_Truncated) isMapListenerResponse_ResponseType() {}

// A response to indicate that a MapListener was subscribed to a cache.
type MapListenerSubscribedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *MapListenerSubscribedResponse) Reset() {
	*x = MapListenerSubscribedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapListenerSubscribedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapListenerSubscribedResponse) ProtoMessage() {}

func (x *MapListenerSubscribedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapListenerSubscribedResponse.ProtoReflect.Descriptor instead.
func (*MapListenerSubscribedResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{31}
}

func (x *MapListenerSubscribedResponse) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

// A response to indicate that a MapListener was unsubscribed from a cache.
type MapListenerUnsubscribedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *MapListenerUnsubscribedResponse) Reset() {
	*x = MapListenerUnsubscribedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapListenerUnsubscribedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapListenerUnsubscribedResponse) ProtoMessage() {}

func (x *MapListenerUnsubscribedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapListenerUnsubscribedResponse.ProtoReflect.Descriptor instead.
func (*MapListenerUnsubscribedResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{32}
}

func (x *MapListenerUnsubscribedResponse) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

// A response to indicate that a cache was destroyed.
type CacheDestroyedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cache string `protobuf:"bytes,1,opt,name=cache,proto3" json:"cache,omitempty"`
}

func (x *CacheDestroyedResponse) Reset() {
	*x = CacheDestroyedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CacheDestroyedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CacheDestroyedResponse) ProtoMessage() {}

func (x *CacheDestroyedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CacheDestroyedResponse.ProtoReflect.Descriptor instead.
func (*CacheDestroyedResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{33}
}

func (x *CacheDestroyedResponse) GetCache() string {
	if x != nil {
		return x.Cache
	}
	return ""
}

// A response to indicate that a cache was truncated.
type CacheTruncatedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cache string `protobuf:"bytes,1,opt,name=cache,proto3" json:"cache,omitempty"`
}

func (x *CacheTruncatedResponse) Reset() {
	*x = CacheTruncatedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CacheTruncatedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CacheTruncatedResponse) ProtoMessage() {}

func (x *CacheTruncatedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CacheTruncatedResponse.ProtoReflect.Descriptor instead.
func (*CacheTruncatedResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{34}
}

func (x *CacheTruncatedResponse) GetCache() string {
	if x != nil {
		return x.Cache
	}
	return ""
}

// A response to indicate that an error occurred processing a MapListener request.
type MapListenerErrorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid     string   `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Message string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Code    int32    `protobuf:"varint,3,opt,name=code,proto3" json:"code,omitempty"`
	Stack   []string `protobuf:"bytes,4,rep,name=stack,proto3" json:"stack,omitempty"`
}

func (x *MapListenerErrorResponse) Reset() {
	*x = MapListenerErrorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapListenerErrorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapListenerErrorResponse) ProtoMessage() {}

func (x *MapListenerErrorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapListenerErrorResponse.ProtoReflect.Descriptor instead.
func (*MapListenerErrorResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{35}
}

func (x *MapListenerErrorResponse) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *MapListenerErrorResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *MapListenerErrorResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *MapListenerErrorResponse) GetStack() []string {
	if x != nil {
		return x.Stack
	}
	return nil
}

// A response containing a MapEvent for a MapListener
type MapEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of the event
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The key of the entry
	Key []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// The new value of the entry
	NewValue []byte `protobuf:"bytes,3,opt,name=newValue,proto3" json:"newValue,omitempty"`
	// The old value of the entry
	OldValue []byte `protobuf:"bytes,4,opt,name=oldValue,proto3" json:"oldValue,omitempty"`
	// TransformationState describes how a CacheEvent has been or should be transformed.
	TransformationState MapEventResponse_TransformationState `protobuf:"varint,5,opt,name=transformationState,proto3,enum=coherence.MapEventResponse_TransformationState" json:"transformationState,omitempty"`
	// The Filter identifiers applicable to the event.
	FilterIds []int64 `protobuf:"varint,6,rep,packed,name=filterIds,proto3" json:"filterIds,omitempty"`
	// A flag indicating whether the event is a synthetic event.
	Synthetic bool `protobuf:"varint,7,opt,name=synthetic,proto3" json:"synthetic,omitempty"`
	// A flag indicating whether the event is a priming event.
	Priming bool `protobuf:"varint,8,opt,name=priming,proto3" json:"priming,omitempty"`
}

func (x *MapEventResponse) Reset() {
	*x = MapEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapEventResponse) ProtoMessage() {}

func (x *MapEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapEventResponse.ProtoReflect.Descriptor instead.
func (*MapEventResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{36}
}

func (x *MapEventResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MapEventResponse) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *MapEventResponse) GetNewValue() []byte {
	if x != nil {
		return x.NewValue
	}
	return nil
}

func (x *MapEventResponse) GetOldValue() []byte {
	if x != nil {
		return x.OldValue
	}
	return nil
}

func (x *MapEventResponse) GetTransformationState() MapEventResponse_TransformationState {
	if x != nil {
		return x.TransformationState
	}
	return MapEventResponse_NON_TRANSFORMABLE
}

func (x *MapEventResponse) GetFilterIds() []int64 {
	if x != nil {
		return x.FilterIds
	}
	return nil
}

func (x *MapEventResponse) GetSynthetic() bool {
	if x != nil {
		return x.Synthetic
	}
	return false
}

func (x *MapEventResponse) GetPriming() bool {
	if x != nil {
		return x.Priming
	}
	return false
}

var File_messages_proto protoreflect.FileDescriptor

var file_messages_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x09, 0x63, 0x6f, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x3a, 0x0a, 0x0c, 0x43,
	0x6c, 0x65, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x63, 0x61, 0x63, 0x68, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x61, 0x63, 0x68, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x6a, 0x0a, 0x12,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x61, 0x63, 0x68, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x70, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x61, 0x63, 0x68, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3c, 0x0a, 0x0e, 0x44, 0x65,
	0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x63, 0x61, 0x63, 0x68, 0x65, 0x22, 0x3c, 0x0a, 0x0e, 0x49, 0x73, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x63, 0x61, 0x63, 0x68, 0x65, 0x22, 0x39, 0x0a, 0x0b, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x22, 0x62, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x61, 0x63, 0x68, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x65, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x8a, 0x01, 0x0a,
	0x0a, 0x50, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x63, 0x61, 0x63, 0x68, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x22, 0x7b, 0x0a, 0x0d, 0x50, 0x75, 0x74,
	0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x63, 0x61, 0x63, 0x68, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x26,
	0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x63, 0x6f, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x92, 0x01, 0x0a, 0x12, 0x50, 0x75, 0x74, 0x49, 0x66,
	0x41, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x63, 0x61, 0x63, 0x68, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x22, 0x65, 0x0a, 0x0d, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x63, 0x61, 0x63, 0x68, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x22, 0x82, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x63, 0x61, 0x63, 0x68, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x7c, 0x0a, 0x0e, 0x52, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xaf, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x61, 0x63, 0x68, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75,
	0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e,
	0x65, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6e,
	0x65, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x69, 0x0a, 0x0b, 0x50, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f,
	0x6f, 0x6b, 0x69, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x63, 0x6f, 0x6f, 0x6b,
	0x69, 0x65, 0x22, 0x4d, 0x0a, 0x0b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6f,
	0x6b, 0x69, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69,
	0x65, 0x22, 0x2f, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x3d, 0x0a, 0x0f, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x22, 0xab, 0x01, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22,
	0x76, 0x0a, 0x12, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x22, 0xa2, 0x01, 0x0a, 0x10, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x63, 0x61, 0x63, 0x68, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x04,
	0x6b, 0x65, 0x79, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x83, 0x01, 0x0a,
	0x0d, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x61, 0x63, 0x68, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x22, 0xa0, 0x01, 0x0a, 0x10, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x41, 0x6c, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x8d, 0x01, 0x0a, 0x0f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x6b, 0x0a, 0x0d, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x22, 0x8b, 0x01, 0x0a, 0x0d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x22, 0x3f, 0x0a, 0x0d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x83, 0x03, 0x0a, 0x12, 0x4d, 0x61, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x3d,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x63,
	0x6f, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x4c, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x74, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6c, 0x69, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x69,
	0x6d, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x72, 0x69, 0x6d,
	0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x2c, 0x0a, 0x0b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x4e, 0x49, 0x54,
	0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4b, 0x45, 0x59, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46,
	0x49, 0x4c, 0x54, 0x45, 0x52, 0x10, 0x02, 0x22, 0xbc, 0x03, 0x0a, 0x13, 0x4d, 0x61, 0x70, 0x4c,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4a, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e,
	0x4d, 0x61, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x0a, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x12, 0x50, 0x0a, 0x0c, 0x75,
	0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x4d, 0x61,
	0x70, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x0c, 0x75, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x12, 0x33, 0x0a,
	0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x6f, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x05, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x4d, 0x61,
	0x70, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x41, 0x0a, 0x09, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x09, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79,
	0x65, 0x64, 0x12, 0x41, 0x0a, 0x09, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x09, 0x74, 0x72, 0x75, 0x6e,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x31, 0x0a, 0x1d, 0x4d, 0x61, 0x70, 0x4c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0x33, 0x0a, 0x1f, 0x4d, 0x61, 0x70,
	0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0x2e,
	0x0a, 0x16, 0x43, 0x61, 0x63, 0x68, 0x65, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x61, 0x63, 0x68, 0x65, 0x22, 0x2e,
	0x0a, 0x16, 0x43, 0x61, 0x63, 0x68, 0x65, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x61, 0x63, 0x68, 0x65, 0x22, 0x70,
	0x0a, 0x18, 0x4d, 0x61, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x22, 0xf7, 0x02, 0x0a, 0x10, 0x4d, 0x61, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6f, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x61, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x63,
	0x6f, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x13, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49, 0x64, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49, 0x64, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x70, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x22, 0x50, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x15, 0x0a, 0x11, 0x4e, 0x4f, 0x4e, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x4f, 0x52, 0x4d,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46,
	0x4f, 0x52, 0x4d, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x46, 0x4f, 0x52, 0x4d, 0x45, 0x44, 0x10, 0x02, 0x42, 0x4a, 0x0a, 0x19, 0x63, 0x6f,
	0x6d, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x68, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x50, 0x01, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2f, 0x63, 0x6f, 0x68,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2d, 0x67, 0x6f, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_messages_proto_rawDescOnce sync.Once
	file_messages_proto_rawDescData = file_messages_proto_rawDesc
)

func file_messages_proto_rawDescGZIP() []byte {
	file_messages_proto_rawDescOnce.Do(func() {
		file_messages_proto_rawDescData = protoimpl.X.CompressGZIP(file_messages_proto_rawDescData)
	})
	return file_messages_proto_rawDescData
}

var file_messages_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_messages_proto_msgTypes = make([]protoimpl.MessageInfo, 37)
var file_messages_proto_goTypes = []interface{}{
	(MapListenerRequest_RequestType)(0),       // 0: coherence.MapListenerRequest.RequestType
	(MapEventResponse_TransformationState)(0), // 1: coherence.MapEventResponse.TransformationState
	(*ClearRequest)(nil),                      // 2: coherence.ClearRequest
	(*ContainsEntryRequest)(nil),              // 3: coherence.ContainsEntryRequest
	(*ContainsKeyRequest)(nil),                // 4: coherence.ContainsKeyRequest
	(*ContainsValueRequest)(nil),              // 5: coherence.ContainsValueRequest
	(*DestroyRequest)(nil),                    // 6: coherence.DestroyRequest
	(*IsEmptyRequest)(nil),                    // 7: coherence.IsEmptyRequest
	(*SizeRequest)(nil),                       // 8: coherence.SizeRequest
	(*GetRequest)(nil),                        // 9: coherence.GetRequest
	(*GetAllRequest)(nil),                     // 10: coherence.GetAllRequest
	(*PutRequest)(nil),                        // 11: coherence.PutRequest
	(*PutAllRequest)(nil),                     // 12: coherence.PutAllRequest
	(*PutIfAbsentRequest)(nil),                // 13: coherence.PutIfAbsentRequest
	(*RemoveRequest)(nil),                     // 14: coherence.RemoveRequest
	(*RemoveMappingRequest)(nil),              // 15: coherence.RemoveMappingRequest
	(*ReplaceRequest)(nil),                    // 16: coherence.ReplaceRequest
	(*ReplaceMappingRequest)(nil),             // 17: coherence.ReplaceMappingRequest
	(*PageRequest)(nil),                       // 18: coherence.PageRequest
	(*EntryResult)(nil),                       // 19: coherence.EntryResult
	(*Entry)(nil),                             // 20: coherence.Entry
	(*TruncateRequest)(nil),                   // 21: coherence.TruncateRequest
	(*AddIndexRequest)(nil),                   // 22: coherence.AddIndexRequest
	(*RemoveIndexRequest)(nil),                // 23: coherence.RemoveIndexRequest
	(*AggregateRequest)(nil),                  // 24: coherence.AggregateRequest
	(*InvokeRequest)(nil),                     // 25: coherence.InvokeRequest
	(*InvokeAllRequest)(nil),                  // 26: coherence.InvokeAllRequest
	(*EntrySetRequest)(nil),                   // 27: coherence.EntrySetRequest
	(*KeySetRequest)(nil),                     // 28: coherence.KeySetRequest
	(*ValuesRequest)(nil),                     // 29: coherence.ValuesRequest
	(*OptionalValue)(nil),                     // 30: coherence.OptionalValue
	(*MapListenerRequest)(nil),                // 31: coherence.MapListenerRequest
	(*MapListenerResponse)(nil),               // 32: coherence.MapListenerResponse
	(*MapListenerSubscribedResponse)(nil),     // 33: coherence.MapListenerSubscribedResponse
	(*MapListenerUnsubscribedResponse)(nil),   // 34: coherence.MapListenerUnsubscribedResponse
	(*CacheDestroyedResponse)(nil),            // 35: coherence.CacheDestroyedResponse
	(*CacheTruncatedResponse)(nil),            // 36: coherence.CacheTruncatedResponse
	(*MapListenerErrorResponse)(nil),          // 37: coherence.MapListenerErrorResponse
	(*MapEventResponse)(nil),                  // 38: coherence.MapEventResponse
}
var file_messages_proto_depIdxs = []int32{
	20, // 0: coherence.PutAllRequest.entry:type_name -> coherence.Entry
	0,  // 1: coherence.MapListenerRequest.type:type_name -> coherence.MapListenerRequest.RequestType
	33, // 2: coherence.MapListenerResponse.subscribed:type_name -> coherence.MapListenerSubscribedResponse
	34, // 3: coherence.MapListenerResponse.unsubscribed:type_name -> coherence.MapListenerUnsubscribedResponse
	38, // 4: coherence.MapListenerResponse.event:type_name -> coherence.MapEventResponse
	37, // 5: coherence.MapListenerResponse.error:type_name -> coherence.MapListenerErrorResponse
	35, // 6: coherence.MapListenerResponse.destroyed:type_name -> coherence.CacheDestroyedResponse
	36, // 7: coherence.MapListenerResponse.truncated:type_name -> coherence.CacheTruncatedResponse
	1,  // 8: coherence.MapEventResponse.transformationState:type_name -> coherence.MapEventResponse.TransformationState
	9,  // [9:9] is the sub-list for method output_type
	9,  // [9:9] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_messages_proto_init() }
func file_messages_proto_init() {
	if File_messages_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_messages_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClearRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainsEntryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainsKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainsValueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsEmptyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SizeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutAllRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutIfAbsentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveMappingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplaceMappingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntryResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Entry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TruncateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddIndexRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveIndexRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggregateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvokeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvokeAllRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntrySetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeySetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValuesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptionalValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapListenerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapListenerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapListenerSubscribedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapListenerUnsubscribedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CacheDestroyedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CacheTruncatedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapListenerErrorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_messages_proto_msgTypes[30].OneofWrappers = []interface{}{
		(*MapListenerResponse_Subscribed)(nil),
		(*MapListenerResponse_Unsubscribed)(nil),
		(*MapListenerResponse_Event)(nil),
		(*MapListenerResponse_Error)(nil),
		(*MapListenerResponse_Destroyed)(nil),
		(*MapListenerResponse_Truncated)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_messages_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   37,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_messages_proto_goTypes,
		DependencyIndexes: file_messages_proto_depIdxs,
		EnumInfos:         file_messages_proto_enumTypes,
		MessageInfos:      file_messages_proto_msgTypes,
	}.Build()
	File_messages_proto = out.File
	file_messages_proto_rawDesc = nil
	file_messages_proto_goTypes = nil
	file_messages_proto_depIdxs = nil
}
