//
// Copyright (c) 2020, 2024, Oracle and/or its affiliates.
//
// Licensed under the Universal Permissive License v 1.0 as shown at
// https://oss.oracle.com/licenses/upl.

// -----------------------------------------------------------------
// Messages used by the Coherence gRPC NamedQueue Service.
//
// NOTE: If you add a new request message to this message the current
// protocol version in com.oracle.coherence.grpc.NamedQueueProtocol must
// be increased. This only needs to be done once for any given Coherence
// release.
// -----------------------------------------------------------------

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.19.2
// source: queue_service_messages_v1.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	_ "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	_ "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// An enum representing the types of request for a Named Queue Service proxy
//
// NOTE: The index numbers for the enum elements MUST NOT BE CHANGED as
// that would break backwards compatibility. Only new index numbers can
// be added.
type NamedQueueRequestType int32

const (
	// An unknown message.
	// This request type is not used, it is here as enums must have a zero value,
	// but we need to know the difference between a zero value and the field being
	// incorrectly set.
	NamedQueueRequestType_Unknown NamedQueueRequestType = 0
	// Clear the specified queue.
	// The message field should not be set.
	// The response will just be a Complete message corresponding to the request id.
	NamedQueueRequestType_Clear NamedQueueRequestType = 1
	// Destroy the specified queue.
	// The message field should not be set.
	// The response will just be a Complete message corresponding to the request id.
	NamedQueueRequestType_Destroy NamedQueueRequestType = 2
	// Called to ensure a queue.
	// Must be the first message called prior to any other queue requests.
	// The message field must be an EnsureQueueRequest.
	// The response will contain the Queue Id and an empty response field.
	NamedQueueRequestType_EnsureQueue NamedQueueRequestType = 3
	// Determine whether the specified queue is empty.
	// The message field should not be set.
	// The response will contain the Queue Id and a BoolValue in the response field.
	NamedQueueRequestType_IsEmpty NamedQueueRequestType = 4
	// Determine whether the specified queue is ready.
	// The message field should not be set.
	// The response will contain the Queue Id and a BoolValue in the response field.
	NamedQueueRequestType_IsReady NamedQueueRequestType = 5
	// Add a value to the tail of a Queue.
	// The message field must contain a BytesValue that contains the
	// serialized value.
	// The response will contain the Queue Id and a QueueOfferResult containing the
	// result of the offer operation.
	NamedQueueRequestType_OfferTail NamedQueueRequestType = 6
	// Add a value to the head of a Deque.
	// This method is only supported for a double ended Deque.
	// The queue type used to ensure the queue must have been a Deque
	// The message field must contain a BytesValue that contains the
	// serialized value.
	// The response will contain the Queue Id and a QueueOfferResult containing the
	// result of the offer operation.
	NamedQueueRequestType_OfferHead NamedQueueRequestType = 7
	// Retrieves and removes the head of this queue.
	// The response will contain the Queue Id and an OptionalValue that will be empty
	// if the queue was empty.
	NamedQueueRequestType_PollHead NamedQueueRequestType = 8
	// Retrieves, but does not remove, the head of this queue.
	// The response will contain the Queue Id and an OptionalValue that will be empty
	// if the queue was empty.
	NamedQueueRequestType_PeekHead NamedQueueRequestType = 9
	// Retrieves and removes the head of this queue.
	// This method is only supported for a double ended Deque.
	// The queue type used to ensure the queue must have been a Deque
	// The response will contain the Queue Id and an OptionalValue that will be empty
	// if the deque was empty.
	NamedQueueRequestType_PollTail NamedQueueRequestType = 10
	// Retrieves, but does not remove, the head of a Deque.
	// This method is only supported for a double ended Deque.
	// The queue type used to ensure the queue must have been a Deque
	// The response will contain the Queue Id and an OptionalValue that will be empty
	// if the queue was empty.
	NamedQueueRequestType_PeekTail NamedQueueRequestType = 11
	// Obtain the size of the specified queue.
	// The message field should not be set.
	// The response will contain the Queue Id and an Int32Value in the response field.
	NamedQueueRequestType_Size NamedQueueRequestType = 12
)

// Enum value maps for NamedQueueRequestType.
var (
	NamedQueueRequestType_name = map[int32]string{
		0:  "Unknown",
		1:  "Clear",
		2:  "Destroy",
		3:  "EnsureQueue",
		4:  "IsEmpty",
		5:  "IsReady",
		6:  "OfferTail",
		7:  "OfferHead",
		8:  "PollHead",
		9:  "PeekHead",
		10: "PollTail",
		11: "PeekTail",
		12: "Size",
	}
	NamedQueueRequestType_value = map[string]int32{
		"Unknown":     0,
		"Clear":       1,
		"Destroy":     2,
		"EnsureQueue": 3,
		"IsEmpty":     4,
		"IsReady":     5,
		"OfferTail":   6,
		"OfferHead":   7,
		"PollHead":    8,
		"PeekHead":    9,
		"PollTail":    10,
		"PeekTail":    11,
		"Size":        12,
	}
)

func (x NamedQueueRequestType) Enum() *NamedQueueRequestType {
	p := new(NamedQueueRequestType)
	*p = x
	return p
}

func (x NamedQueueRequestType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NamedQueueRequestType) Descriptor() protoreflect.EnumDescriptor {
	return file_queue_service_messages_v1_proto_enumTypes[0].Descriptor()
}

func (NamedQueueRequestType) Type() protoreflect.EnumType {
	return &file_queue_service_messages_v1_proto_enumTypes[0]
}

func (x NamedQueueRequestType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NamedQueueRequestType.Descriptor instead.
func (NamedQueueRequestType) EnumDescriptor() ([]byte, []int) {
	return file_queue_service_messages_v1_proto_rawDescGZIP(), []int{0}
}

// An enum representing different types of response.
//
// NOTE: The index numbers for the enum elements MUST NOT BE CHANGED as
// that would break backwards compatibility. Only new index numbers can
// be added.
type NamedQueueResponseType int32

const (
	// The response is a message.
	NamedQueueResponseType_Message NamedQueueResponseType = 0
	// The response is a queue event.
	NamedQueueResponseType_QueueEvent NamedQueueResponseType = 1
	// The response is destroy event
	NamedQueueResponseType_Destroyed NamedQueueResponseType = 2
	// The response is truncated event
	NamedQueueResponseType_Truncated NamedQueueResponseType = 3
)

// Enum value maps for NamedQueueResponseType.
var (
	NamedQueueResponseType_name = map[int32]string{
		0: "Message",
		1: "QueueEvent",
		2: "Destroyed",
		3: "Truncated",
	}
	NamedQueueResponseType_value = map[string]int32{
		"Message":    0,
		"QueueEvent": 1,
		"Destroyed":  2,
		"Truncated":  3,
	}
)

func (x NamedQueueResponseType) Enum() *NamedQueueResponseType {
	p := new(NamedQueueResponseType)
	*p = x
	return p
}

func (x NamedQueueResponseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NamedQueueResponseType) Descriptor() protoreflect.EnumDescriptor {
	return file_queue_service_messages_v1_proto_enumTypes[1].Descriptor()
}

func (NamedQueueResponseType) Type() protoreflect.EnumType {
	return &file_queue_service_messages_v1_proto_enumTypes[1]
}

func (x NamedQueueResponseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NamedQueueResponseType.Descriptor instead.
func (NamedQueueResponseType) EnumDescriptor() ([]byte, []int) {
	return file_queue_service_messages_v1_proto_rawDescGZIP(), []int{1}
}

// An enum representing the type of a queue.
type NamedQueueType int32

const (
	// A plain Queue
	NamedQueueType_Queue NamedQueueType = 0
	// A double ended Deque
	NamedQueueType_Deque NamedQueueType = 1
	// A distributed paged
	NamedQueueType_PagedQueue NamedQueueType = 3
)

// Enum value maps for NamedQueueType.
var (
	NamedQueueType_name = map[int32]string{
		0: "Queue",
		1: "Deque",
		3: "PagedQueue",
	}
	NamedQueueType_value = map[string]int32{
		"Queue":      0,
		"Deque":      1,
		"PagedQueue": 3,
	}
)

func (x NamedQueueType) Enum() *NamedQueueType {
	p := new(NamedQueueType)
	*p = x
	return p
}

func (x NamedQueueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NamedQueueType) Descriptor() protoreflect.EnumDescriptor {
	return file_queue_service_messages_v1_proto_enumTypes[2].Descriptor()
}

func (NamedQueueType) Type() protoreflect.EnumType {
	return &file_queue_service_messages_v1_proto_enumTypes[2]
}

func (x NamedQueueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NamedQueueType.Descriptor instead.
func (NamedQueueType) EnumDescriptor() ([]byte, []int) {
	return file_queue_service_messages_v1_proto_rawDescGZIP(), []int{2}
}

// A request to perform an operation on a remote NamedQueue.
type NamedQueueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of the request
	Type NamedQueueRequestType `protobuf:"varint,1,opt,name=type,proto3,enum=coherence.concurrent.queue.v1.NamedQueueRequestType" json:"type,omitempty"`
	// The queue identifier for the request.
	// The identifier must be the same value returned by the initial ensure queue request.
	// This is optional only for EnsureQueue as this cannot have a queue identifier
	QueueId *int32 `protobuf:"varint,2,opt,name=queueId,proto3,oneof" json:"queueId,omitempty"`
	// The actual request message, this is optional because some messages do not require
	// a message body, for example queue.size()
	// The actual request message should be packed inside an Any message and set in this field.
	// The proxy will know which message type to expect here based on the "type" field's value.
	Message *anypb.Any `protobuf:"bytes,3,opt,name=message,proto3,oneof" json:"message,omitempty"`
}

func (x *NamedQueueRequest) Reset() {
	*x = NamedQueueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_queue_service_messages_v1_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamedQueueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamedQueueRequest) ProtoMessage() {}

func (x *NamedQueueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_queue_service_messages_v1_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamedQueueRequest.ProtoReflect.Descriptor instead.
func (*NamedQueueRequest) Descriptor() ([]byte, []int) {
	return file_queue_service_messages_v1_proto_rawDescGZIP(), []int{0}
}

func (x *NamedQueueRequest) GetType() NamedQueueRequestType {
	if x != nil {
		return x.Type
	}
	return NamedQueueRequestType_Unknown
}

func (x *NamedQueueRequest) GetQueueId() int32 {
	if x != nil && x.QueueId != nil {
		return *x.QueueId
	}
	return 0
}

func (x *NamedQueueRequest) GetMessage() *anypb.Any {
	if x != nil {
		return x.Message
	}
	return nil
}

// A response message from a Named Queue Service proxy.
//
// NOTE: If you add a new request message to this message the protocol
// version in com.oracle.coherence.grpc.NamedQueueProtocol must be
// increased. This only needs to be done once for any given Coherence
// release.
type NamedQueueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The queue identifier for the request
	QueueId int32 `protobuf:"varint,1,opt,name=queueId,proto3" json:"queueId,omitempty"`
	// An enum representing different response types.
	Type NamedQueueResponseType `protobuf:"varint,2,opt,name=type,proto3,enum=coherence.concurrent.queue.v1.NamedQueueResponseType" json:"type,omitempty"`
	// The response can contain one of a number of response types
	// The sender of the corresponding request should know which
	// response type it expects
	Message *anypb.Any `protobuf:"bytes,3,opt,name=message,proto3,oneof" json:"message,omitempty"`
}

func (x *NamedQueueResponse) Reset() {
	*x = NamedQueueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_queue_service_messages_v1_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamedQueueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamedQueueResponse) ProtoMessage() {}

func (x *NamedQueueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_queue_service_messages_v1_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamedQueueResponse.ProtoReflect.Descriptor instead.
func (*NamedQueueResponse) Descriptor() ([]byte, []int) {
	return file_queue_service_messages_v1_proto_rawDescGZIP(), []int{1}
}

func (x *NamedQueueResponse) GetQueueId() int32 {
	if x != nil {
		return x.QueueId
	}
	return 0
}

func (x *NamedQueueResponse) GetType() NamedQueueResponseType {
	if x != nil {
		return x.Type
	}
	return NamedQueueResponseType_Message
}

func (x *NamedQueueResponse) GetMessage() *anypb.Any {
	if x != nil {
		return x.Message
	}
	return nil
}

// A request to ensure a specific queue.
type EnsureQueueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the queue.
	Queue string `protobuf:"bytes,1,opt,name=queue,proto3" json:"queue,omitempty"`
	// The type of queue
	Type NamedQueueType `protobuf:"varint,2,opt,name=type,proto3,enum=coherence.concurrent.queue.v1.NamedQueueType" json:"type,omitempty"`
}

func (x *EnsureQueueRequest) Reset() {
	*x = EnsureQueueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_queue_service_messages_v1_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnsureQueueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnsureQueueRequest) ProtoMessage() {}

func (x *EnsureQueueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_queue_service_messages_v1_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnsureQueueRequest.ProtoReflect.Descriptor instead.
func (*EnsureQueueRequest) Descriptor() ([]byte, []int) {
	return file_queue_service_messages_v1_proto_rawDescGZIP(), []int{2}
}

func (x *EnsureQueueRequest) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

func (x *EnsureQueueRequest) GetType() NamedQueueType {
	if x != nil {
		return x.Type
	}
	return NamedQueueType_Queue
}

// The result of offering an element to a queue.
type QueueOfferResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A flag indicating whether the offer was successful
	Succeeded bool `protobuf:"varint,1,opt,name=succeeded,proto3" json:"succeeded,omitempty"`
	// An int64 value representing an index into the queue
	// where the element was added.
	Index int64 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *QueueOfferResult) Reset() {
	*x = QueueOfferResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_queue_service_messages_v1_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueOfferResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueOfferResult) ProtoMessage() {}

func (x *QueueOfferResult) ProtoReflect() protoreflect.Message {
	mi := &file_queue_service_messages_v1_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueOfferResult.ProtoReflect.Descriptor instead.
func (*QueueOfferResult) Descriptor() ([]byte, []int) {
	return file_queue_service_messages_v1_proto_rawDescGZIP(), []int{3}
}

func (x *QueueOfferResult) GetSucceeded() bool {
	if x != nil {
		return x.Succeeded
	}
	return false
}

func (x *QueueOfferResult) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

var File_queue_service_messages_v1_proto protoreflect.FileDescriptor

var file_queue_service_messages_v1_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x1d, 0x63, 0x6f, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x76, 0x31,
	0x1a, 0x18, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xc9, 0x01, 0x0a, 0x11, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x68, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2e, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x75, 0x65, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x07, 0x71, 0x75, 0x65, 0x75, 0x65, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x33, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x48, 0x01, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x49, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0xba, 0x01, 0x0a, 0x12, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x75, 0x65, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x71, 0x75, 0x65, 0x75, 0x65, 0x49, 0x64,
	0x12, 0x49, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35,
	0x2e, 0x63, 0x6f, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x2e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x61, 0x6d, 0x65, 0x64, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6e, 0x79, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x6d, 0x0a, 0x12,
	0x45, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x41, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x68, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2e, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x46, 0x0a, 0x10, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x2a, 0xc7, 0x01, 0x0a, 0x15, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x6c,
	0x65, 0x61, 0x72, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79,
	0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x73, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x10, 0x04,
	0x12, 0x0b, 0x0a, 0x07, 0x49, 0x73, 0x52, 0x65, 0x61, 0x64, 0x79, 0x10, 0x05, 0x12, 0x0d, 0x0a,
	0x09, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x54, 0x61, 0x69, 0x6c, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09,
	0x4f, 0x66, 0x66, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x50,
	0x6f, 0x6c, 0x6c, 0x48, 0x65, 0x61, 0x64, 0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x65, 0x65,
	0x6b, 0x48, 0x65, 0x61, 0x64, 0x10, 0x09, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x6f, 0x6c, 0x6c, 0x54,
	0x61, 0x69, 0x6c, 0x10, 0x0a, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x65, 0x65, 0x6b, 0x54, 0x61, 0x69,
	0x6c, 0x10, 0x0b, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x10, 0x0c, 0x2a, 0x53, 0x0a,
	0x16, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x51, 0x75, 0x65, 0x75, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x65,
	0x64, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x10, 0x03, 0x2a, 0x36, 0x0a, 0x0e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x75, 0x65, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x44, 0x65, 0x71, 0x75, 0x65, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x61,
	0x67, 0x65, 0x64, 0x51, 0x75, 0x65, 0x75, 0x65, 0x10, 0x03, 0x42, 0x6a, 0x0a, 0x36, 0x63, 0x6f,
	0x6d, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x68, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2e, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x2e, 0x76, 0x31, 0x50, 0x01, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2f, 0x63, 0x6f, 0x68, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x2d, 0x67, 0x6f, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_queue_service_messages_v1_proto_rawDescOnce sync.Once
	file_queue_service_messages_v1_proto_rawDescData = file_queue_service_messages_v1_proto_rawDesc
)

func file_queue_service_messages_v1_proto_rawDescGZIP() []byte {
	file_queue_service_messages_v1_proto_rawDescOnce.Do(func() {
		file_queue_service_messages_v1_proto_rawDescData = protoimpl.X.CompressGZIP(file_queue_service_messages_v1_proto_rawDescData)
	})
	return file_queue_service_messages_v1_proto_rawDescData
}

var file_queue_service_messages_v1_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_queue_service_messages_v1_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_queue_service_messages_v1_proto_goTypes = []interface{}{
	(NamedQueueRequestType)(0),  // 0: coherence.concurrent.queue.v1.NamedQueueRequestType
	(NamedQueueResponseType)(0), // 1: coherence.concurrent.queue.v1.NamedQueueResponseType
	(NamedQueueType)(0),         // 2: coherence.concurrent.queue.v1.NamedQueueType
	(*NamedQueueRequest)(nil),   // 3: coherence.concurrent.queue.v1.NamedQueueRequest
	(*NamedQueueResponse)(nil),  // 4: coherence.concurrent.queue.v1.NamedQueueResponse
	(*EnsureQueueRequest)(nil),  // 5: coherence.concurrent.queue.v1.EnsureQueueRequest
	(*QueueOfferResult)(nil),    // 6: coherence.concurrent.queue.v1.QueueOfferResult
	(*anypb.Any)(nil),           // 7: google.protobuf.Any
}
var file_queue_service_messages_v1_proto_depIdxs = []int32{
	0, // 0: coherence.concurrent.queue.v1.NamedQueueRequest.type:type_name -> coherence.concurrent.queue.v1.NamedQueueRequestType
	7, // 1: coherence.concurrent.queue.v1.NamedQueueRequest.message:type_name -> google.protobuf.Any
	1, // 2: coherence.concurrent.queue.v1.NamedQueueResponse.type:type_name -> coherence.concurrent.queue.v1.NamedQueueResponseType
	7, // 3: coherence.concurrent.queue.v1.NamedQueueResponse.message:type_name -> google.protobuf.Any
	2, // 4: coherence.concurrent.queue.v1.EnsureQueueRequest.type:type_name -> coherence.concurrent.queue.v1.NamedQueueType
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_queue_service_messages_v1_proto_init() }
func file_queue_service_messages_v1_proto_init() {
	if File_queue_service_messages_v1_proto != nil {
		return
	}
	file_common_messages_v1_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_queue_service_messages_v1_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamedQueueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_queue_service_messages_v1_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamedQueueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_queue_service_messages_v1_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnsureQueueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_queue_service_messages_v1_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueueOfferResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_queue_service_messages_v1_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_queue_service_messages_v1_proto_msgTypes[1].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_queue_service_messages_v1_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_queue_service_messages_v1_proto_goTypes,
		DependencyIndexes: file_queue_service_messages_v1_proto_depIdxs,
		EnumInfos:         file_queue_service_messages_v1_proto_enumTypes,
		MessageInfos:      file_queue_service_messages_v1_proto_msgTypes,
	}.Build()
	File_queue_service_messages_v1_proto = out.File
	file_queue_service_messages_v1_proto_rawDesc = nil
	file_queue_service_messages_v1_proto_goTypes = nil
	file_queue_service_messages_v1_proto_depIdxs = nil
}
