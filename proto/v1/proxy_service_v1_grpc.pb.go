//
// Copyright (c) 2020, 2024, Oracle and/or its affiliates.
//
// Licensed under the Universal Permissive License v 1.0 as shown at
// https://oss.oracle.com/licenses/upl.

// NamedCacheService V2 service definition.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.2
// source: proxy_service_v1.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ProxyService_SubChannel_FullMethodName = "/coherence.proxy.v1.ProxyService/subChannel"
)

// ProxyServiceClient is the client API for ProxyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProxyServiceClient interface {
	// Sets up a bidirectional channel for cache requests and responses.
	SubChannel(ctx context.Context, opts ...grpc.CallOption) (ProxyService_SubChannelClient, error)
}

type proxyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProxyServiceClient(cc grpc.ClientConnInterface) ProxyServiceClient {
	return &proxyServiceClient{cc}
}

func (c *proxyServiceClient) SubChannel(ctx context.Context, opts ...grpc.CallOption) (ProxyService_SubChannelClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProxyService_ServiceDesc.Streams[0], ProxyService_SubChannel_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &proxyServiceSubChannelClient{stream}
	return x, nil
}

type ProxyService_SubChannelClient interface {
	Send(*ProxyRequest) error
	Recv() (*ProxyResponse, error)
	grpc.ClientStream
}

type proxyServiceSubChannelClient struct {
	grpc.ClientStream
}

func (x *proxyServiceSubChannelClient) Send(m *ProxyRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *proxyServiceSubChannelClient) Recv() (*ProxyResponse, error) {
	m := new(ProxyResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProxyServiceServer is the server API for ProxyService service.
// All implementations must embed UnimplementedProxyServiceServer
// for forward compatibility
type ProxyServiceServer interface {
	// Sets up a bidirectional channel for cache requests and responses.
	SubChannel(ProxyService_SubChannelServer) error
	mustEmbedUnimplementedProxyServiceServer()
}

// UnimplementedProxyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProxyServiceServer struct {
}

func (UnimplementedProxyServiceServer) SubChannel(ProxyService_SubChannelServer) error {
	return status.Errorf(codes.Unimplemented, "method SubChannel not implemented")
}
func (UnimplementedProxyServiceServer) mustEmbedUnimplementedProxyServiceServer() {}

// UnsafeProxyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProxyServiceServer will
// result in compilation errors.
type UnsafeProxyServiceServer interface {
	mustEmbedUnimplementedProxyServiceServer()
}

func RegisterProxyServiceServer(s grpc.ServiceRegistrar, srv ProxyServiceServer) {
	s.RegisterService(&ProxyService_ServiceDesc, srv)
}

func _ProxyService_SubChannel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProxyServiceServer).SubChannel(&proxyServiceSubChannelServer{stream})
}

type ProxyService_SubChannelServer interface {
	Send(*ProxyResponse) error
	Recv() (*ProxyRequest, error)
	grpc.ServerStream
}

type proxyServiceSubChannelServer struct {
	grpc.ServerStream
}

func (x *proxyServiceSubChannelServer) Send(m *ProxyResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *proxyServiceSubChannelServer) Recv() (*ProxyRequest, error) {
	m := new(ProxyRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProxyService_ServiceDesc is the grpc.ServiceDesc for ProxyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProxyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "coherence.proxy.v1.ProxyService",
	HandlerType: (*ProxyServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "subChannel",
			Handler:       _ProxyService_SubChannel_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proxy_service_v1.proto",
}
